<?xml version="1.0" encoding="utf-8"?> <?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?> <feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><title>ByteAether</title><subtitle>This is a longer description about your blog.</subtitle><link href="https://byteaether.github.io/feed/feed.xml" rel="self"><link href="https://byteaether.github.io/"><updated>2025-10-24T00:00:00Z</updated><id>https://byteaether.github.io/</id><author><name>Joonatan Uusv√§li</name></author><entry><title>Building an Enterprise Data Access Layer: Automated Auditing</title><link href="https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-automated-auditing/"><updated>2025-10-24T00:00:00Z</updated><id>https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-automated-auditing/</id><content type="html">&lt;p&gt;In our &lt;a href=&quot;https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-database-and-code-structure/&quot;&gt;previous posts&lt;/a&gt;, we laid the foundation for our enterprise Data Access Layer (DAL). We established our core principles: a database-first philosophy, the use of C# and &lt;a href=&quot;https://github.com/linq2db/linq2db&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Linq2Db&lt;/a&gt;, and a commitment to automating cross-cutting concerns to enhance security and data integrity. We also structured our project, set up a scaffolding interceptor to enrich our auto-generated entities, and chose &lt;a href=&quot;https://github.com/ByteAether/Ulid&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ULIDs&lt;/a&gt; as our primary keys for their performance benefits.&lt;/p&gt;&lt;p&gt;This post will build directly on that foundation. We will &lt;a href=&quot;https://github.com/ByteAether/EnterpriseDal/tree/part3&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;implement&lt;/a&gt; one of the most common and critical DAL features: automated audit fields. Specifically, we will ensure that &lt;code&gt;CreatedAt&lt;/code&gt; and &lt;code&gt;ModifiedAt&lt;/code&gt; timestamps are automatically and correctly populated for every entity, without requiring any manual intervention from the developer using the DAL. This automation is key to preventing data inconsistencies and reducing cognitive load on engineers.&lt;/p&gt;&lt;h2 id=&quot;a-philosophical-shift%3A-technical-vs.-business-logical-crud&quot; tabindex=&quot;-1&quot;&gt;A Philosophical Shift: Technical vs. Business-Logical CRUD&lt;/h2&gt;&lt;p&gt;Before diving into the implementation, it is important to introduce a conceptual distinction that will guide our design. In software development, we often use the acronym &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;CRUD&lt;/strong&gt; (Create, Read, Update, Delete)&lt;/a&gt; to describe data operations. However, these terms often conflate low-level database actions with high-level business logic.&lt;/p&gt;&lt;p&gt;To build a truly robust DAL, we must separate these concepts:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Technical CRUD:&lt;/strong&gt; These are the raw database commands: &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;. They represent the fundamental operations the database engine can perform. In our DAL, these will be the underlying methods provided by Linq2Db.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Business-Logical CRUD:&lt;/strong&gt; These are higher-level abstractions that represent business intent: &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;MODIFY&lt;/code&gt;, &lt;code&gt;REMOVE&lt;/code&gt;. A single business-logical operation might involve multiple technical operations, validation, and the application of cross-cutting concerns like auditing or security.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Our goal is to expose the business-logical methods (&lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;MODIFY&lt;/code&gt;, &lt;code&gt;REMOVE&lt;/code&gt;) to the application&#39;s business logic layer, while discouraging the direct use of the technical methods (&lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;). By doing so, we guarantee that all our automated rules (such as setting audit fields, enforcing soft-delete, or applying multi-tenancy filters) are always executed.&lt;/p&gt;&lt;p&gt;For now, this separation is a matter of developer discipline. In a future post, we may explore building a &lt;strong&gt;custom Roslyn (static code) analyzer&lt;/strong&gt; that warns an engineer if they attempt to call a technical CRUD method directly from a higher-level service, thus enforcing this architectural pattern at compile time.&lt;/p&gt;&lt;h2 id=&quot;step-1%3A-defining-behavior-with-icreatable-and-imodifiable&quot; tabindex=&quot;-1&quot;&gt;Step 1: Defining Behavior with &lt;code&gt;ICreatable&lt;/code&gt; and &lt;code&gt;IModifiable&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;To apply auditing logic selectively, we first need a way to identify which entities require it. We achieve this by defining &amp;quot;entity behavior&amp;quot; interfaces. For this feature, we will add two new interfaces to our &lt;code&gt;DAL.Base/EntityBehavior&lt;/code&gt; directory:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ICreatable&lt;/code&gt;&lt;/strong&gt;: This interface signifies that an entity has a creation timestamp.&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICreatable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IEntity&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;DateTime&lt;/span&gt; CreatedAt &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;IModifiable&lt;/code&gt;&lt;/strong&gt;: This interface signifies that an entity has a modification timestamp.&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IModifiable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IEntity&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;DateTime&lt;/span&gt; ModifiedAt &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These interfaces are simple contracts. An entity implementing &lt;code&gt;ICreatable&lt;/code&gt; guarantees it has a &lt;code&gt;CreatedAt&lt;/code&gt; property. This allows us to write generic extension methods that can operate on any entity fulfilling this contract.&lt;/p&gt;&lt;h2 id=&quot;step-2%3A-evolving-the-database-and-scaffolding&quot; tabindex=&quot;-1&quot;&gt;Step 2: Evolving the Database and Scaffolding&lt;/h2&gt;&lt;p&gt;Following our database-first approach, the next step is to update our database schema. We add &lt;code&gt;created_at DATETIME not null&lt;/code&gt; and &lt;code&gt;modified_at DATETIME not null&lt;/code&gt; columns to all four of our tables: &lt;code&gt;tenant&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and &lt;code&gt;comment&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;With the database schema updated, we can enhance our scaffolding interceptor. In addition to adding the &lt;code&gt;IEntity&lt;/code&gt; and &lt;code&gt;IIdentifiable&amp;lt;Ulid&amp;gt;&lt;/code&gt; interfaces as it did before, the interceptor will now inspect the properties of each table during code generation.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If a table contains a property named &lt;code&gt;CreatedAt&lt;/code&gt;, the interceptor will automatically add &lt;code&gt;ICreatable&lt;/code&gt; interface to the generated partial class definition.&lt;/li&gt;&lt;li&gt;If a table contains a property named &lt;code&gt;ModifiedAt&lt;/code&gt;, it will add &lt;code&gt;IModifiable&lt;/code&gt; interface.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After running the scaffolding tool, our generated &lt;code&gt;User&lt;/code&gt; entity, for example, will now have a signature like this in &lt;code&gt;DbCtx.generated.cs&lt;/code&gt;:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IIdentifiable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Ulid&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICreatable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IModifiable&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ... generated properties&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This powerful combination of a database-first approach and an intelligent interceptor ensures our C# entity definitions always stay synchronized with the database schema and its intended behaviors, without manual intervention.&lt;/p&gt;&lt;h2 id=&quot;step-3%3A-implementing-the-business-logic-in-crudextensions.cs&quot; tabindex=&quot;-1&quot;&gt;Step 3: Implementing the Business Logic in &lt;code&gt;CrudExtensions.cs&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Now that our entities automatically implement the correct interfaces, we can create the extension methods that constitute our business-logical &lt;code&gt;CREATE&lt;/code&gt; and &lt;code&gt;MODIFY&lt;/code&gt; operations. We&#39;ll place these in a new file, &lt;a href=&quot;https://github.com/ByteAether/EnterpriseDal/blob/part3/DAL.Base/CrudExtensions.cs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;DAL.Base/CrudExtensions.cs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;the-createasync-method&quot; tabindex=&quot;-1&quot;&gt;The &lt;code&gt;CreateAsync&lt;/code&gt; Method&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;CreateAsync&lt;/code&gt; method is an extension on &lt;code&gt;DbCtx&lt;/code&gt;. It takes either an entity object or an enumerable of them, automatically sets the audit fields, and then calls the underlying technical &lt;code&gt;INSERT&lt;/code&gt; operation.&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;CreateAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DbCtx&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; entities&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; cancellationToken &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEntity&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BulkCopyAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; entities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICreatable&lt;/span&gt; creatable &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; creatable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CreatedAt &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; creatable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CreatedAt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IModifiable&lt;/span&gt; updateable &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; updateable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModifiedAt &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; updateable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModifiedAt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cancellationToken &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RowsCopied&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;CreateAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DbCtx&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; entity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; cancellationToken &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEntity&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;entity&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cancellationToken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By checking the interfaces, these methods correctly handle any entity. If an entity only implements &lt;code&gt;ICreatable&lt;/code&gt;, only &lt;code&gt;CreatedAt&lt;/code&gt; is set. If it implements both, both timestamps are set.&lt;/p&gt;&lt;h3 id=&quot;the-modifyasync-method&quot; tabindex=&quot;-1&quot;&gt;The &lt;code&gt;ModifyAsync&lt;/code&gt; Method&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;ModifyAsync&lt;/code&gt; methods are slightly different. They are extensions on either &lt;code&gt;DbCtx&lt;/code&gt; or &lt;code&gt;IQueryable&amp;lt;T&amp;gt;&lt;/code&gt;, designed to work with Linq2Db&#39;s fluent update syntax.&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ModifyAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DbCtx&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; entity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; cancellationToken &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEntity&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entity &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IModifiable&lt;/span&gt; updateable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; updateable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModifiedAt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetTable&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UpdateOptimisticAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cancellationToken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ModifyAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IUpdatable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; cancellationToken &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;IModifiable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsAssignableFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Sql&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;DateTime&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;IModifiable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModifiedAt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UpdateAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cancellationToken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ModifyAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IQueryable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; cancellationToken &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AsUpdatable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ModifyAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cancellationToken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These methods cleverly inspect the generic type &lt;code&gt;T&lt;/code&gt;. If &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;IModifiable&lt;/code&gt;, it injects a &lt;code&gt;.Set()&lt;/code&gt; call to update the &lt;code&gt;ModifiedAt&lt;/code&gt; field with the current timestamp before executing the final &lt;code&gt;UpdateAsync()&lt;/code&gt; call or assigns the current timestamp to an entity&#39;s property. This ensures that any update operation expressed through this fluent API is properly audited.&lt;/p&gt;&lt;h3 id=&quot;a-note-on-iqueryexpressioninterceptor&quot; tabindex=&quot;-1&quot;&gt;A Note on &lt;code&gt;IQueryExpressionInterceptor&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;You might be wondering if there is a more integrated way to achieve this within Linq2Db, rather than creating wrapper extension methods. Linq2Db provides a &lt;a href=&quot;https://github.com/linq2db/linq2db/blob/59940d23f474599b6820a83f3116cc256dd42cc1/Source/LinqToDB/Interceptors/IQueryExpressionInterceptor.cs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;IQueryExpressionInterceptor&lt;/code&gt;&lt;/a&gt; interface, which is designed to intercept every query expression before its translation into SQL. In theory, this would be the perfect place to inject our auditing logic.&lt;/p&gt;&lt;p&gt;Unfortunately, as of this writing, the implementation of this interceptor is not consistently triggered across all operation types. For example, it does not fire for &lt;code&gt;INSERT&lt;/code&gt; operations or for calls to &lt;code&gt;IDataContext.UpdateAsync&amp;lt;T&amp;gt;()&lt;/code&gt;, although it does trigger for the fluent &lt;code&gt;IUpdatable&amp;lt;T&amp;gt;.UpdateAsync()&lt;/code&gt; method. This inconsistency makes it unsuitable for building a reliable, all-encompassing auditing system.&lt;/p&gt;&lt;p&gt;Should this behavior be fixed in a future version of Linq2Db to reliably intercept all query expressions, it would offer a more elegant solution. We could then centralize our auditing logic in the interceptor and use the standard &lt;code&gt;InsertAsync&lt;/code&gt; and &lt;code&gt;UpdateAsync&lt;/code&gt; methods directly. This would eliminate the need for our custom &lt;code&gt;CreateAsync&lt;/code&gt; and &lt;code&gt;ModifyAsync&lt;/code&gt; wrappers and the potential need for a static code analyzer to enforce their use. If such an update occurs, we will certainly explore it in a follow-up article.&lt;/p&gt;&lt;h2 id=&quot;seeing-it-in-action&quot; tabindex=&quot;-1&quot;&gt;Seeing it in Action&lt;/h2&gt;&lt;p&gt;With all the pieces in place, we can verify that our implementation works as expected. We can write a small test in &lt;code&gt;Program.cs&lt;/code&gt; to create and then modify a &lt;code&gt;User&lt;/code&gt; entity. Notice that our C# code never explicitly provides a value for &lt;code&gt;CreatedAt&lt;/code&gt; or &lt;code&gt;ModifiedAt&lt;/code&gt;.&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BeginTransactionAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Create entity&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; u &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Username &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;asd123&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;u&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LastQuery&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Modify entity&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetTable&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; u&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;asd1234&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ModifyAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LastQuery&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RollbackTransactionAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Executing this code produces the following SQL, captured from Linq2Db&#39;s &lt;code&gt;LastQuery&lt;/code&gt; property:&lt;/p&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tenant_id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;created_at&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;modified_at&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;X&lt;span class=&quot;token string&quot;&gt;&#39;0199C31CC424CFC7293147E8A6AE578C&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;X&lt;span class=&quot;token string&quot;&gt;&#39;00000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;asd123&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2025-10-08 09:17:46.472&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2025-10-08 09:17:46.473&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;asd1234&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;modified_at&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2025-10-08 09:17:46.506&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; X&lt;span class=&quot;token string&quot;&gt;&#39;0199C31CC424CFC7293147E8A6AE578C&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output confirms our success. The &lt;code&gt;INSERT&lt;/code&gt; statement correctly includes values for both &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;modified_at&lt;/code&gt;. The &lt;code&gt;UPDATE&lt;/code&gt; statement automatically includes the &lt;code&gt;SET&lt;/code&gt; clause for &lt;code&gt;modified_at&lt;/code&gt;. Our DAL now handles these audit fields transparently, reliably, and without any developer effort.&lt;/p&gt;&lt;p&gt;The complete implementation for this part of the series can be found on GitHub: &lt;a href=&quot;https://github.com/ByteAether/EnterpriseDal/tree/part3&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://github.com/ByteAether/EnterpriseDal/tree/part3&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;conclusion-and-next-steps&quot; tabindex=&quot;-1&quot;&gt;Conclusion and Next Steps&lt;/h2&gt;&lt;p&gt;In this post, we successfully implemented automated auditing for creation and modification timestamps. We introduced the critical distinction between technical and business-logical CRUD operations, defined entity behaviors using interfaces, and leveraged our scaffolding interceptor to automate their implementation. Finally, we created generic extension methods that apply auditing rules consistently across all relevant entities.&lt;/p&gt;&lt;p&gt;In the next episode, we will tackle another core DAL capability: &lt;strong&gt;Soft-Delete&lt;/strong&gt;. This feature is similar in that it will rely on a new interface, but it introduces an additional layer of complexity: we must also implement a global query filter to automatically exclude soft-deleted records from all read operations, a crucial step in preventing data leakage and ensuring application correctness.&lt;/p&gt;</content></entry><entry><title>Building an Enterprise Data Access Layer: Database and Code Structure</title><link href="https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-database-and-code-structure/"><updated>2025-10-07T00:00:00Z</updated><id>https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-database-and-code-structure/</id><content type="html">&lt;p&gt;Welcome back to our series on building a robust, enterprise-grade Data Access Layer (DAL) with C# and Linq2Db. In our &lt;a href=&quot;https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-the-foundation/&quot;&gt;previous post&lt;/a&gt;, we established the core principles and non-negotiable capabilities our DAL must possess, including automatic multi-tenancy filtering, soft-delete, and auditing. Now, we&#39;ll begin laying the foundation for this powerful system by defining the database schema and the initial code structure.&lt;/p&gt;&lt;p&gt;This post will explore the deliberate technical choices we have made for this project&#39;s foundation. While these decisions may seem straightforward at first glance, each one serves a specific purpose in building a scalable, secure, and maintainable data layer that abstracts complexity away from the business logic.&lt;/p&gt;&lt;h2 id=&quot;the-database-first-philosophy&quot; tabindex=&quot;-1&quot;&gt;The Database-First Philosophy&lt;/h2&gt;&lt;p&gt;Before we define the structure, let&#39;s address the approach. This project is firmly rooted in a database-first philosophy. In my view, the database is a core engineering artifact and should be treated as such, designed and managed using purpose-built database engineering tools. The schema is the source of truth, and our code should be a faithful reflection of that schema.&lt;/p&gt;&lt;p&gt;This approach ensures that database constraints, indexes, and data types are optimized for the database engine itself, rather than being an afterthought generated by an Object-Relational Mapper (ORM). It provides a clear separation of concerns, allowing database administrators and backend engineers to collaborate on a well-defined and performant schema.&lt;/p&gt;&lt;h2 id=&quot;our-core-data-model&quot; tabindex=&quot;-1&quot;&gt;Our Core Data Model&lt;/h2&gt;&lt;p&gt;For this series, we will build a simple data model to represent a multi-tenant blogging platform. The model consists of four essential tables, each with a clear purpose and relationship to the others.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;tenant&lt;/code&gt;: This table represents the top-level entity in our multi-tenant application. Every user belongs to a single tenant, and all data within a tenant is isolated from others. It contains a unique &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;user&lt;/code&gt;: This table holds our user accounts. Each user is associated with a specific &lt;code&gt;tenant&lt;/code&gt; via a foreign key (&lt;code&gt;tenant_id&lt;/code&gt;). It also contains a &lt;code&gt;username&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;post&lt;/code&gt;: A &lt;code&gt;post&lt;/code&gt; is a content unit created by a &lt;code&gt;user&lt;/code&gt;. It references the &lt;code&gt;user&lt;/code&gt; via a foreign key (&lt;code&gt;user_id&lt;/code&gt;). A post has a &lt;code&gt;title&lt;/code&gt; and the main &lt;code&gt;content&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;comment&lt;/code&gt;: This table stores comments on a post. Each &lt;code&gt;comment&lt;/code&gt; is linked to a &lt;code&gt;post&lt;/code&gt; via a foreign key (&lt;code&gt;post_id&lt;/code&gt;) and contains its &lt;code&gt;content&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The relationships are as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;comment.post_id&lt;/code&gt; references &lt;code&gt;post.id&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;post.user_id&lt;/code&gt; references &lt;code&gt;user.id&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;user.tenant_id&lt;/code&gt; references &lt;code&gt;tenant.id&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This simple structure allows us to demonstrate how the DAL can automatically enforce rules like multi-tenancy and permissions by navigating these relationships.&lt;/p&gt;&lt;h2 id=&quot;the-power-of-the-ulid&quot; tabindex=&quot;-1&quot;&gt;The Power of the ULID&lt;/h2&gt;&lt;p&gt;A cornerstone of our database design is the choice of &lt;strong&gt;&lt;a href=&quot;https://github.com/ulid/spec&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ULID (Universal Unique Lexicographically Sortable Identifier)&lt;/a&gt;&lt;/strong&gt; as the primary key for all tables. A ULID is a 128-bit identifier that combines the uniqueness of a UUID with the sortable properties of a timestamp.&lt;/p&gt;&lt;p&gt;In our C# code, we will use the &lt;a href=&quot;https://github.com/ByteAether/Ulid&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ByteAether.Ulid&lt;/a&gt; library. This library provides a native &lt;code&gt;Ulid&lt;/code&gt; type that is specifically designed for this purpose. In the database, ULIDs are stored as 128-bit binary, which is the most efficient representation.&lt;/p&gt;&lt;p&gt;The key advantage of ULIDs is their sortability. Because the first 48 bits of a ULID are a timestamp, when you sort a column of ULIDs, you are also sorting by the order of creation. This is incredibly beneficial for performance on append-only tables, as new records are always written to the end of the table, minimizing fragmentation. It also makes it easy to find the most recent records without a separate timestamp column.&lt;/p&gt;&lt;p&gt;For databases like SQLite, this property allows us to declare our tables &lt;code&gt;WITHOUT ROWID&lt;/code&gt;. This SQLite-specific feature, when used with a ULID primary key, removes the default internal 64-bit integer row identifier, making the ULID the sole source of record identity and order. Since ULIDs are inherently sortable, the table is naturally clustered by creation time, which optimizes read operations on the most recent data.&lt;/p&gt;&lt;p&gt;Here is the full SQL schema for our four tables:&lt;/p&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt; tenant &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; id ulid &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; without rowid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; id ulid &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tenant_id ulid &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;references&lt;/span&gt; tenant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; username &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; without rowid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt; post &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; id ulid &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user_id ulid &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;references&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; without rowid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; id ulid &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; post_id ulid &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;references&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; without rowid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;the-scaffolding-and-code-structure&quot; tabindex=&quot;-1&quot;&gt;The Scaffolding and Code Structure&lt;/h2&gt;&lt;p&gt;With our database schema defined, we now turn to the C# code. We will use &lt;a href=&quot;https://linq2db.github.io/articles/CLI.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Linq2Db&#39;s built-in scaffolding tool&lt;/a&gt; to generate our C# entity classes and a database context. However, we will enhance this process with a custom scaffolding interceptor.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ByteAether/EnterpriseDal/tree/part2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Our core code structure&lt;/a&gt; will be organized into a few key areas:&lt;/p&gt;&lt;h3 id=&quot;dal.base&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;DAL.Base&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;This namespace holds the fundamental interfaces that all of our entities may inherit from. We&#39;re keeping it simple for now, with two interfaces:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;IEntity&lt;/code&gt;: A simple marker interface that all of our data access layer entities will inherit. While it is empty now, its existence allows us to build generic services and behaviors that can be applied to any entity in the DAL.&lt;/li&gt;&lt;li&gt;&lt;code&gt;IIdentifiable&amp;lt;T&amp;gt;&lt;/code&gt;: An interface that marks any entity that has a property named &lt;code&gt;Id&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt;. This is a crucial interface for our core services, as it allows us to build generic logic that can operate on any entity with an identifier. For example, a generic &lt;code&gt;queryable.WhereId()&lt;/code&gt; method would require this interface.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;dal.context&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;DAL.Context&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;This namespace contains our database context and all generated entity classes. We&#39;ve made a key architectural decision here: all generated classes will reside in a single file named DbCtx.generated.cs. This simplifies the regeneration process, as you only need to update a single file when the database schema changes.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;DbCtx.generated.cs&lt;/code&gt;: This file will be created by the Linq2Db scaffolding tool. It will contain our &lt;code&gt;DbCtx&lt;/code&gt; class, as well as partial classes for our &lt;code&gt;Tenant&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt;, &lt;code&gt;Post&lt;/code&gt;, and &lt;code&gt;Comment&lt;/code&gt; entities.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DbCtx.cs&lt;/code&gt;: This is the complementary file for our &lt;code&gt;DbCtx.generated.cs&lt;/code&gt;. The &lt;code&gt;DbCtx&lt;/code&gt; class is a partial class, so we can extend it with our own methods and properties here, leaving the generated file untouched.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A key piece of the &lt;code&gt;DbCtx.cs&lt;/code&gt; file is the &lt;code&gt;partial void InitDataContext()&lt;/code&gt; method. This method, which is automatically called by the generated constructor in &lt;code&gt;DbCtx.generated.cs&lt;/code&gt;, is where we will define the runtime type mapping for our &lt;code&gt;Ulid&lt;/code&gt;s. This ensures that when Linq2Db reads a &lt;code&gt;ulid&lt;/code&gt; type from the database (as a byte array), it is correctly converted into a &lt;code&gt;Ulid&lt;/code&gt; C# object, and vice versa. This runtime mapping is the counterpart to the design-time mapping handled by our &lt;code&gt;ScaffoldInterceptor&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&quot;dal.context.entity&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;DAL.Context.Entity&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;This namespace is where we will create additional partial classes to extend the functionality of our generated entity classes. For example, we could create a &lt;code&gt;Post.cs&lt;/code&gt; file to add a convenience method for getting the post&#39;s user from the database.&lt;/p&gt;&lt;h3 id=&quot;dal.scaffoldinterceptor&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;DAL.ScaffoldInterceptor&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;This is the &amp;quot;secret sauce&amp;quot; of our scaffolding process. We will create a class that implements &lt;code&gt;ScaffoldInterceptors&lt;/code&gt;. This interceptor allows us to hook into the scaffolding process and customize it.&lt;/p&gt;&lt;p&gt;Our custom interceptor will perform two key functions:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Interface Injection&lt;/strong&gt;: It will automatically add our &lt;code&gt;IEntity&lt;/code&gt; and &lt;code&gt;IIdentifiable&amp;lt;Ulid&amp;gt;&lt;/code&gt; interfaces to the generated partial entity classes.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ULID Type Mapping&lt;/strong&gt;: It will intercept any database column with the &lt;code&gt;ulid&lt;/code&gt; type and ensure it is properly mapped to the &lt;code&gt;Ulid&lt;/code&gt; type from our C# library in the generated code.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Association Naming Convention&lt;/strong&gt;: We will use the interceptor to enforce a strict and predictable naming convention for association properties. For One-To-Many relationships, we adopt a simple &#39;s&#39; suffix (e.g., a &lt;code&gt;Post&lt;/code&gt; entity will have a property named &lt;code&gt;Comments&lt;/code&gt;, not &lt;code&gt;Commentaries&lt;/code&gt; or &lt;code&gt;Commentss&lt;/code&gt;). This deliberate choice avoids the ambiguity and confusion that can arise from irregular pluralization in English (e.g., avoiding a scenario where a &lt;code&gt;Mouse&lt;/code&gt; entity might generate a &lt;code&gt;Mice&lt;/code&gt; collection). For Many-To-One relationships, we simply use the entity&#39;s singular name (e.g., a &lt;code&gt;Comment&lt;/code&gt; entity will have a &lt;code&gt;Post&lt;/code&gt; property).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The use of partial classes is a core tenet of this approach. It gives us the best of both worlds: we have the convenience of an automatically generated code base that stays in sync with our database schema, while also having the freedom to extend and customize our models and database context without ever touching the generated code.&lt;/p&gt;&lt;h2 id=&quot;looking-ahead&quot; tabindex=&quot;-1&quot;&gt;Looking Ahead&lt;/h2&gt;&lt;p&gt;In this post, we&#39;ve defined the bedrock of our enterprise DAL, from the database schema and the choice of ULID primary keys to the core code structure and our enhanced scaffolding process. We started simple, without implementing audit fields or a permission system. The project&#39;s root also includes a simple &lt;code&gt;Program.cs&lt;/code&gt; file used for demonstration. This utility file connects to our SQLite database and runs simple LINQ queries (like selecting all users). Crucially, we use it to inspect the &lt;em&gt;generated SQL&lt;/em&gt; from our LINQ expressions, rather than executing the queries and reviewing the result set. This allows us to verify that our DAL is correctly translating our C# code into performant SQL.&lt;/p&gt;&lt;p&gt;The full source code for this post, including the scaffolding interceptor and the completed project structure, is available at &lt;a href=&quot;https://github.com/ByteAether/EnterpriseDal/tree/part2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note on Dependencies:&lt;/strong&gt; This entire series and its accompanying code are built on the forthcoming &lt;strong&gt;&lt;a href=&quot;https://github.com/linq2db/linq2db&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Linq2Db version 6.0&lt;/a&gt;&lt;/strong&gt;. As of the time of writing, this version is only available as a Release Candidate (RC3). To include necessary fixes not yet in the official package, we have manually included a specific build of the Linq2Db NuGet package within the project&#39;s &lt;code&gt;/nuget&lt;/code&gt; folder. This ensures the code reflects the behavior of the final 6.0 release.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In the next post, we will dive into the details of implementing the crucial audit fields (&lt;code&gt;CreatedAt&lt;/code&gt;, &lt;code&gt;CreatedBy&lt;/code&gt;, &lt;code&gt;ModifiedAt&lt;/code&gt;, and &lt;code&gt;ModifiedBy&lt;/code&gt;) and the logic to automatically populate them during data operations. We&#39;ll show how the foundation we&#39;ve built here makes this complex, cross-cutting concern remarkably simple to implement.&lt;/p&gt;</content></entry><entry><title>Building an Enterprise Data Access Layer: The Foundation</title><link href="https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-the-foundation/"><updated>2025-09-25T00:00:00Z</updated><id>https://byteaether.github.io/2025/building-an-enterprise-data-access-layer-the-foundation/</id><content type="html">&lt;p&gt;In enterprise software development, the &lt;strong&gt;Data Access Layer (DAL)&lt;/strong&gt; serves as the critical interface between an application&#39;s business logic and its underlying data store. Beyond basic CRUD operations, a robust DAL is fundamental for ensuring data integrity, security, and operational consistency. It proactively addresses cross-cutting concerns, preventing inconsistencies, defects, and potential security vulnerabilities that arise when these responsibilities are left to the business logic.&lt;/p&gt;&lt;p&gt;This series will detail the design and implementation of an enterprise-level Data Access Layer in C#, with a primary focus on &lt;a href=&quot;https://github.com/linq2db/linq2db&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Linq2Db&lt;/a&gt;. We&#39;ll demonstrate how to embed essential cross-cutting concerns directly within the DAL, ensuring their consistent application without reliance on manual enforcement within the business logic. Linq2Db&#39;s capabilities, particularly its strong support for advanced SQL features and expression tree manipulation, make it an excellent choice for building a highly customized and efficient DAL. We outline the fundamental capabilities such a DAL must provide, establishing the framework for subsequent practical implementations.&lt;/p&gt;&lt;h2 id=&quot;the-necessity-of-an-automated%2C-error-resistant-dal&quot; tabindex=&quot;-1&quot;&gt;The Necessity of an Automated, Error-Resistant DAL&lt;/h2&gt;&lt;p&gt;The lifecycle of an enterprise application involves continuous data creation, modification, and retrieval by various users and automated processes. Without a centralized, opinionated, and highly capable DAL, developers are tasked with manually implementing critical data-related behaviors across numerous service methods and business logic components. This decentralized approach is susceptible to human error, such as overlooking a filter, omitting an audit field, or mismanaging a soft-delete operation. Such oversights can lead to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Data Inconsistencies:&lt;/strong&gt; Records may lack complete audit information, entities might be inconsistently soft-deleted, or multi-tenancy rules may be applied unevenly.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Security Vulnerabilities:&lt;/strong&gt; A missed &lt;code&gt;TenantId&lt;/code&gt; filter or inadequate enforcement of row-level permissions can result in unauthorized data exposure. Such breaches carry significant legal, financial, and reputational risks.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Increased Development Overhead and Technical Debt:&lt;/strong&gt; Manual implementation of cross-cutting concerns introduces boilerplate code, extends development cycles, and increases the probability of introducing subtle, hard-to-diagnose defects.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The core premise of this series is that these capabilities must be inherent to the DAL. The DAL should function as a guardian, automatically applying these rules and transformations, thereby offloading this responsibility from the business logic and ensuring consistent, secure, and reliable data interaction.&lt;/p&gt;&lt;h2 id=&quot;core-capabilities-of-an-enterprise-data-access-layer&quot; tabindex=&quot;-1&quot;&gt;Core Capabilities of an Enterprise Data Access Layer&lt;/h2&gt;&lt;p&gt;We&#39;ll now examine the critical capabilities an enterprise DAL should provide, abstracting them from the application&#39;s business logic.&lt;/p&gt;&lt;h3 id=&quot;1.-createdat%2Fmodifiedat-auditing&quot; tabindex=&quot;-1&quot;&gt;1. &lt;code&gt;CreatedAt&lt;/code&gt;/&lt;code&gt;ModifiedAt&lt;/code&gt; Auditing&lt;/h3&gt;&lt;p&gt;Maintaining an audit trail of when data records were created and last modified is a fundamental requirement for most enterprise applications. This temporal auditing provides insights for debugging, compliance, and understanding data evolution. Manually setting &lt;code&gt;CreatedAt&lt;/code&gt; and &lt;code&gt;ModifiedAt&lt;/code&gt; timestamps in the business logic for every &lt;code&gt;INSERT&lt;/code&gt; and &lt;code&gt;UPDATE&lt;/code&gt; operation is repetitive and prone to omission.&lt;/p&gt;&lt;p&gt;A sophisticated DAL should automate this process. Upon entity insertion, the DAL should automatically populate its &lt;code&gt;CreatedAt&lt;/code&gt; property with the current timestamp. Similarly, upon any update to an existing entity, the DAL should automatically update its &lt;code&gt;ModifiedAt&lt;/code&gt; property. This ensures that every record consistently carries its creation and last modification timestamps, without explicit action required from the business logic developer. This automation guarantees comprehensive temporal auditing across the entire dataset.&lt;/p&gt;&lt;h3 id=&quot;2.-createdby%2Fmodifiedby-auditing&quot; tabindex=&quot;-1&quot;&gt;2. &lt;code&gt;CreatedBy&lt;/code&gt;/&lt;code&gt;ModifiedBy&lt;/code&gt; Auditing&lt;/h3&gt;&lt;p&gt;Extending temporal auditing, it is often critical to identify the user responsible for a particular data change. This &amp;quot;who&amp;quot; information, typically represented by a User ID, enhances accountability and traceability within the audit trail. As with &lt;code&gt;CreatedAt&lt;/code&gt;/&lt;code&gt;ModifiedAt&lt;/code&gt;, manually populating &lt;code&gt;CreatedBy&lt;/code&gt; and &lt;code&gt;ModifiedBy&lt;/code&gt; fields in the business logic is a source of potential errors.&lt;/p&gt;&lt;p&gt;The enterprise DAL should seamlessly manage this. For new entities, it should automatically set the &lt;code&gt;CreatedBy&lt;/code&gt; property to the ID of the current user. For updates, it should update the &lt;code&gt;ModifiedBy&lt;/code&gt; property. The current User ID must be settable for the scope of an entire API request or a specific unit of work. The DAL will then automatically retrieve and apply this contextual User ID to the appropriate fields during persistence operations. This mechanism ensures that every data change is attributed to the responsible user, providing a complete and reliable audit history.&lt;/p&gt;&lt;h3 id=&quot;3.-soft-delete&quot; tabindex=&quot;-1&quot;&gt;3. Soft-Delete&lt;/h3&gt;&lt;p&gt;In many enterprise scenarios, physical data deletion is undesirable due to auditing requirements, data recovery needs, or the necessity of maintaining historical context. Soft-delete addresses this by marking a record as logically &amp;quot;deleted&amp;quot; rather than physically removing it.&lt;/p&gt;&lt;p&gt;An enterprise DAL should automate this process. When the business logic initiates a &amp;quot;delete&amp;quot; operation, the DAL should intercept this call. Instead of issuing a &lt;code&gt;DELETE&lt;/code&gt; SQL command, it should update a designated &lt;code&gt;DeletedAt&lt;/code&gt; property (e.g., a &lt;code&gt;DateTimeOffset?&lt;/code&gt; nullable timestamp) on the entity. Furthermore, all standard read operations performed through the DAL must automatically filter out entities where &lt;code&gt;DeletedAt&lt;/code&gt; is not null, unless explicitly overridden (e.g., for administrative recovery tools). This ensures that the business logic perceives soft-deleted entities as non-existent without requiring manual &lt;code&gt;WHERE DeletedAt IS NULL&lt;/code&gt; clauses in every query. This capability is essential for data integrity and provides a safeguard against accidental data loss.&lt;/p&gt;&lt;h3 id=&quot;4.-tenantid-filtering-(multi-tenancy)&quot; tabindex=&quot;-1&quot;&gt;4. &lt;code&gt;TenantId&lt;/code&gt; Filtering (Multi-Tenancy)&lt;/h3&gt;&lt;p&gt;Multi-tenancy, where a single application instance serves multiple distinct organizations (tenants), is a common architectural pattern in SaaS solutions. Strict data isolation is critical: &lt;code&gt;Tenant A&lt;/code&gt; must never access &lt;code&gt;Tenant B&lt;/code&gt;&#39;s data. Enforcing this isolation is exceptionally challenging if left to the business logic, as every query, join, and relationship traversal would require manual &lt;code&gt;TenantId&lt;/code&gt; filtering. A single missed filter can lead to catastrophic data leakage.&lt;/p&gt;&lt;p&gt;Our enterprise DAL must provide automatic &lt;code&gt;TenantId&lt;/code&gt; filtering. For entities designated as &amp;quot;tenant-owned,&amp;quot; the DAL should automatically inject a &lt;code&gt;WHERE TenantId = [CurrentTenantId]&lt;/code&gt; clause into all read operations. Crucially, this filtering must propagate throughout all associations. If a query involves joining across multiple tables, the DAL must ensure the &lt;code&gt;TenantId&lt;/code&gt; filter is applied appropriately at each relevant level to prevent data from other tenants from being inadvertently included. Similar to the &lt;code&gt;CreatedBy&lt;/code&gt;/&lt;code&gt;ModifiedBy&lt;/code&gt; capability, the &lt;code&gt;TenantId&lt;/code&gt; must be settable for the scope of the current API request or unit of work, enabling the DAL to transparently apply it to all relevant data operations. This capability is a cornerstone of security and data isolation in multi-tenant architectures.&lt;/p&gt;&lt;h3 id=&quot;5.-entity-based-permissions-(row-level-security)&quot; tabindex=&quot;-1&quot;&gt;5. Entity-Based-Permissions (Row-Level Security)&lt;/h3&gt;&lt;p&gt;Beyond multi-tenancy, many applications require more granular control over data visibility, often termed row-level security or entity-based permissions. This allows specific users to view certain entities while restricting others, even within the same tenant. For example, in a project management system, a user might only access tasks assigned to them or their team. Implementing this within the business logic is complex, often resulting in deeply nested conditional logic and a high risk of oversight.&lt;/p&gt;&lt;p&gt;An advanced DAL should fully enforce entity-based permissions. Entities themselves will define whether they are protected by the permission system. For protected entities, they will also define how the ID, upon which the permission system will operate, is derived. The DAL will then automatically apply these permission checks during all read operations, effectively filtering out rows that the current user is not authorized to see. This abstraction ensures that the business logic operates under the assumption that it only receives data the user is permitted to view, significantly simplifying development and bolstering security. The current User ID, set for the scope of the API request or unit of work, will provide the context for these permission evaluations.&lt;/p&gt;&lt;h3 id=&quot;6.-projected-data-support-for-contextual-filtering&quot; tabindex=&quot;-1&quot;&gt;6. Projected Data Support for Contextual Filtering&lt;/h3&gt;&lt;p&gt;Both &lt;code&gt;TenantId&lt;/code&gt; filtering and entity-based permissions introduce a common challenge: the relevant ID (e.g., &lt;code&gt;TenantId&lt;/code&gt; or permission &lt;code&gt;ObjectId&lt;/code&gt;) may not always be a direct property on the entity being queried. For instance, a &lt;code&gt;Comment&lt;/code&gt; entity might not have its own &lt;code&gt;TenantId&lt;/code&gt; but instead inherits it from its parent &lt;code&gt;Post&lt;/code&gt; entity (&lt;code&gt;this.Post.TenantId&lt;/code&gt;). Similarly, permissions for a &lt;code&gt;Task&lt;/code&gt; might be based on the &lt;code&gt;Id&lt;/code&gt; of its &lt;code&gt;Project&lt;/code&gt; (&lt;code&gt;this.Project.Id&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;The enterprise DAL must provide a mechanism for entities to define how these contextual IDs are retrieved. This &amp;quot;projected data support&amp;quot; allows an entity to specify a path or a function (e.g., a LINQ expression) that the DAL can use to resolve the &lt;code&gt;TenantId&lt;/code&gt; or the &lt;code&gt;ObjectId&lt;/code&gt; for filtering purposes. This flexibility ensures that the DAL can correctly apply multi-tenancy and row-level security even when the relevant identifiers are not directly present on the entity itself but are accessible through its relationships, maintaining consistency and correctness across complex data models.&lt;/p&gt;&lt;h2 id=&quot;why-linq2db%3F&quot; tabindex=&quot;-1&quot;&gt;Why Linq2Db?&lt;/h2&gt;&lt;p&gt;While &lt;strong&gt;Entity Framework Core (EF Core)&lt;/strong&gt; is a widely adopted and powerful ORM in the .NET ecosystem, this series will primarily focus on implementing our enterprise DAL using &lt;strong&gt;&lt;a href=&quot;https://github.com/linq2db/linq2db&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Linq2Db&lt;/a&gt;&lt;/strong&gt;. Linq2Db offers a highly flexible and performant approach to data access, particularly excelling in scenarios requiring fine-grained control over generated SQL.&lt;/p&gt;&lt;p&gt;One of Linq2Db&#39;s significant advantages for our purposes is its robust support for features like projected properties and direct translation of SQL window functions into LINQ queries. While not all of these advanced features may be strictly necessary for the current enterprise DAL implementation, they collectively illustrate Linq2Db&#39;s broader capabilities and its suitability for complex data manipulation. Such capabilities are crucial for efficiently implementing complex filtering and auditing mechanisms directly within the DAL, often requiring less boilerplate or specialized extension libraries compared to EF Core. While EF Core does support some of these advanced scenarios through community-contributed extension libraries, Linq2Db provides many of these features out-of-the-box, simplifying our implementation journey.&lt;/p&gt;&lt;p&gt;Our decision to focus on Linq2Db for this series is driven by its suitability for demonstrating how to build a highly optimized and feature-rich DAL that minimizes manual intervention and maximizes precision in data operations.&lt;/p&gt;&lt;h2 id=&quot;scope-of-history-support&quot; tabindex=&quot;-1&quot;&gt;Scope of History Support&lt;/h2&gt;&lt;p&gt;It is important to clarify that while this series will implement certain auditing functionalities, such as &lt;code&gt;CreatedAt&lt;/code&gt;/&lt;code&gt;ModifiedAt&lt;/code&gt; and &lt;code&gt;CreatedBy&lt;/code&gt;/&lt;code&gt;ModifiedBy&lt;/code&gt; fields, it will &lt;strong&gt;not&lt;/strong&gt; cover full history support. Implementing a complete archive of all data at all points in time, including granular versioning and temporal querying capabilities, is a significant undertaking. However, the capabilities developed in this series are foundational and can be extended with full history support later without invalidating the core principles and implementations discussed. Our focus remains on the automated enforcement of the capabilities outlined above to enhance data consistency and security at the transactional level.&lt;/p&gt;&lt;h2 id=&quot;the-journey-ahead&quot; tabindex=&quot;-1&quot;&gt;The Journey Ahead&lt;/h2&gt;&lt;p&gt;Centralizing these essential capabilities within an enterprise-grade Data Access Layer is key to building applications that are inherently more consistent, secure, and maintainable. With Linq2Db as our primary ORM for this implementation journey, the business logic can focus solely on its core rules rather than on data access mechanics.&lt;/p&gt;&lt;p&gt;We encourage you to prepare your development environment for the next installment, where we will establish the foundational C# project and begin implementing the DAL with Linq2Db. Upon completion of this series, a comparative analysis may also be provided by reproducing the same solution using Entity Framework Core.&lt;/p&gt;</content></entry><entry><title>ByteAether.Ulid v1.3.0: Enhanced ULID Generation Control and Security</title><link href="https://byteaether.github.io/2025/byteaetherulid-v130-enhanced-ulid-generation-control-and-security/"><updated>2025-07-31T00:00:00Z</updated><id>https://byteaether.github.io/2025/byteaetherulid-v130-enhanced-ulid-generation-control-and-security/</id><content type="html">&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/ByteAether/Ulid/releases/tag/v1.3.0&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ByteAether.Ulid v1.3.0&lt;/a&gt;&lt;/strong&gt;, a significant update to our high-performance .NET ULID implementation, has been released. This version introduces enhanced flexibility and security for ULID generation, reinforcing its suitability for modern applications.&lt;/p&gt;&lt;p&gt;ByteAether aims to provide a compliant and dependable ULID solution for .NET developers. ULIDs combine universal uniqueness with lexicographical sortability, making them suitable for distributed systems and time-ordered data by optimizing indexing and querying.&lt;/p&gt;&lt;h2 id=&quot;enhanced-generation-control-with-generationoptions&quot; tabindex=&quot;-1&quot;&gt;Enhanced Generation Control with &lt;code&gt;GenerationOptions&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Previous versions of ByteAether.Ulid utilized a &lt;code&gt;bool? isMonotonic&lt;/code&gt; and &lt;code&gt;Ulid.DefaultIsMonotonic&lt;/code&gt; flags for monotonic generation control. Version 1.3.0 replaces this with a new configuration object, &lt;code&gt;GenerationOptions&lt;/code&gt;, offering granular control over ULID generation. &lt;code&gt;GenerationOptions&lt;/code&gt; includes three parameters: &lt;code&gt;Monotonicity&lt;/code&gt;, &lt;code&gt;InitialRandomSource&lt;/code&gt;, and &lt;code&gt;IncrementRandomSource&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&quot;generationoptions-explained&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;GenerationOptions&lt;/code&gt; Explained&lt;/h2&gt;&lt;p&gt;Let&#39;s explore the new &lt;code&gt;GenerationOptions&lt;/code&gt; in detail:&lt;/p&gt;&lt;h3 id=&quot;monotonicity&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;Monotonicity&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;This option controls the monotonic behavior of ULIDs, offering choices to balance predictability and uniqueness:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;NonMonotonic&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;Generates a fully random &lt;code&gt;Random&lt;/code&gt; component, suitable when strict sequential ordering is not required.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;MonotonicIncrement&lt;/code&gt; (Default)&lt;/strong&gt;&lt;br&gt;Maintains strict monotonic progression by incrementing the random portion of the ULID by 1, mirroring previous monotonic generation behavior.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;MonotonicRandom1Byte&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;MonotonicRandom2Byte&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;MonotonicRandom3Byte&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;MonotonicRandom4Byte&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;These options enhance security and unpredictability. As discussed in &lt;a href=&quot;https://github.com/ulid/spec/issues/105&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ULID specification issue #105&lt;/a&gt;, incrementing the random part by &lt;code&gt;1&lt;/code&gt; can lead to predictable ULIDs within the same millisecond, potentially enabling enumeration attacks. To mitigate this, these options allow configuring a random increment from 1-byte (1‚Äì256) to 4-byte (1‚Äì4,294,967,296) range using the &lt;code&gt;IncrementRandomSource&lt;/code&gt;. This adds a layer of randomness, making ULIDs more difficult to guess while preserving lexicographical sortability, directly addressing enumeration mitigation concerns in the ULID specification.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;initialrandomsource-and-incrementrandomsource&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;InitialRandomSource&lt;/code&gt; and &lt;code&gt;IncrementRandomSource&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Both &lt;code&gt;InitialRandomSource&lt;/code&gt; and &lt;code&gt;IncrementRandomSource&lt;/code&gt; properties are of type &lt;code&gt;IRandomProvider&lt;/code&gt;. This design provides a flexible way to define how randomness is produced, &lt;strong&gt;allowing users to implement and provide their own custom random number generators&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;InitialRandomSource&lt;/code&gt; option specifies the source of randomness for the initial random component of the ULID. The &lt;code&gt;IncrementRandomSource&lt;/code&gt; setting determines the source of randomness for the increment value when using &lt;code&gt;MonotonicRandomXByte&lt;/code&gt; options for monotonicity.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;CryptographicallySecureRandomProvider&lt;/code&gt; (Default for &lt;code&gt;InitialRandomSource&lt;/code&gt;)&lt;/strong&gt;&lt;br&gt;Utilizes a cryptographically secure random number generator, ensuring high entropy and suitability for security-sensitive applications.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;PseudoRandomProvider&lt;/code&gt; (Default for &lt;code&gt;IncrementRandomSource&lt;/code&gt;)&lt;/strong&gt;&lt;br&gt;Employs a faster pseudo-random algorithm, suitable for scenarios where cryptographic security isn&#39;t a primary concern, and performance is prioritized.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;default-behavior-and-backward-compatibility&quot; tabindex=&quot;-1&quot;&gt;Default Behavior and Backward Compatibility&lt;/h2&gt;&lt;p&gt;Version 1.3.0&#39;s default settings ensure a seamless transition, matching previous ByteAether.Ulid monotonic generation behavior:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefaultGenerationOptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GenerationOptions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Monotonicity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MonotonicityOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MonotonicIncrement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; InitialRandomSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CryptographicallySecureRandomProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; IncrementRandomSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;PseudoRandomProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Upgrading to v1.3.0 will not alter existing ULID generation logic unless &lt;code&gt;GenerationOptions&lt;/code&gt; are explicitly configured and assigned to &lt;code&gt;Ulid.DefaultGenerationOptions&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For backward compatibility, public API methods with a &lt;code&gt;bool? isMonotonic&lt;/code&gt; parameter and the &lt;code&gt;Ulid.DefaultIsMonotonic&lt;/code&gt; static property remain, but are marked &lt;code&gt;[Obsolete]&lt;/code&gt;. These are deprecated to encourage migration to the &lt;code&gt;GenerationOptions&lt;/code&gt;-based methods for enhanced control and flexibility. Obsolete methods and properties will be removed in a future version and users are encouraged to update their code for future compatibility and to leverage new capabilities.&lt;/p&gt;&lt;h2 id=&quot;why-ulids%3F&quot; tabindex=&quot;-1&quot;&gt;Why ULIDs?&lt;/h2&gt;&lt;p&gt;Identifier selection is crucial in distributed systems. GUIDs provide uniqueness but lack sortability, hindering database indexing and querying. Integer IDs are sortable but may conflict in distributed environments due to their limited scope.&lt;/p&gt;&lt;p&gt;ULIDs combine universal uniqueness with lexicographical sortability:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Universally Unique&lt;/strong&gt;: Ensures global distinctness across systems.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lexicographically Sortable&lt;/strong&gt;: Enables efficient time-based sorting for database performance and chronological data retrieval.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Human-Readable&lt;/strong&gt;: More manageable than GUIDs.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ByteAether.Ulid is a robust and compliant .NET implementation. It addresses potential issues from the &lt;a href=&quot;https://github.com/ulid/spec/issues/39&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;official ULID specification, such as the &amp;quot;random part overflow&amp;quot; issue&lt;/a&gt;, by allowing timestamp increments to ensure unique ULIDs even at high generation rates.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ByteAether/Ulid?tab=readme-ov-file#benchmarking&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Benchmarking against other .NET ULID implementations&lt;/a&gt; (e.g., &lt;code&gt;NetUlid&lt;/code&gt;, &lt;code&gt;Ulid&lt;/code&gt;, &lt;code&gt;NUlid&lt;/code&gt;), &lt;code&gt;Guid&lt;/code&gt;, and &lt;code&gt;GuidV7&lt;/code&gt; consistently shows ByteAether.Ulid as highly performant and fully compliant with the ULID specification, ensuring dependable generation.&lt;/p&gt;&lt;h2 id=&quot;installation-and-usage&quot; tabindex=&quot;-1&quot;&gt;Installation and Usage&lt;/h2&gt;&lt;p&gt;Install ByteAether.Ulid v1.3.0 via NuGet:&lt;/p&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package ByteAether.Ulid&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example of &lt;code&gt;GenerationOptions&lt;/code&gt; usage:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;ByteAether&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Ulid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByteAether&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GenerationOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; optionsWithRandomIncrement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GenerationOptions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 4-byte random increment&lt;/span&gt; Monotonicity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MonotonicityOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MonotonicRandom4Byte&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Cryptographically secure initial random&lt;/span&gt; InitialRandomSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CryptographicallySecureRandomProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Cryptographically secure increment random&lt;/span&gt; IncrementRandomSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CryptographicallySecureRandomProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; ulidWithRandomInc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;optionsWithRandomIncrement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;ULID with random increment: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;ulidWithRandomInc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Set default generation options globally&lt;/span&gt; Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefaultGenerationOptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Monotonicity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MonotonicityOptions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MonotonicIncrement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pseudo-randomness for speed&lt;/span&gt; InitialRandomSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;PseudoRandomProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// IncrementRandomSource is not used by MonotonicIncrement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; defaultUlid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;ULID from default pseudo-random source: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;defaultUlid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;ecosystem-integration&quot; tabindex=&quot;-1&quot;&gt;Ecosystem Integration&lt;/h2&gt;&lt;p&gt;ByteAether.Ulid integrates with popular .NET libraries and frameworks:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt;: Integrates as a route or query parameter with a built-in &lt;code&gt;TypeConverter&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;System.Text.Json (.NET 5.0+)&lt;/strong&gt;: Includes a &lt;code&gt;JsonConverter&lt;/code&gt; for serialization and deserialization.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;EF Core&lt;/strong&gt;: Supports ULIDs as primary keys or properties via a custom &lt;code&gt;ValueConverter&lt;/code&gt; (&lt;code&gt;Ulid&lt;/code&gt; to &lt;code&gt;byte[]&lt;/code&gt;).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Dapper&lt;/strong&gt;: Supports custom &lt;code&gt;TypeHandler&lt;/code&gt; for &lt;code&gt;Ulid&lt;/code&gt; to &lt;code&gt;byte[]&lt;/code&gt; conversion.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;MessagePack&lt;/strong&gt;: Provides a custom &lt;code&gt;MessagePackResolver&lt;/code&gt; for Ulid (as &lt;code&gt;byte[]&lt;/code&gt;) serialization and deserialization.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Newtonsoft.Json&lt;/strong&gt;: A custom &lt;code&gt;JsonConverter&lt;/code&gt; enables Ulid (as &lt;code&gt;string&lt;/code&gt;) serialization and deserialization.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;contribute-to-byteaether.ulid&quot; tabindex=&quot;-1&quot;&gt;Contribute to ByteAether.Ulid&lt;/h2&gt;&lt;p&gt;We are committed to the continuous improvement of &lt;a href=&quot;https://github.com/ByteAether/Ulid&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ByteAether.Ulid&lt;/a&gt;. Contributions, including pull requests, bug reports, and feature suggestions, are welcome. Your input is valuable for shaping the project&#39;s future.&lt;/p&gt;&lt;p&gt;Upgrade to &lt;strong&gt;ByteAether.Ulid v1.3.0&lt;/strong&gt; for enhanced control, security, and performance in ULID generation.&lt;/p&gt;</content></entry><entry><title>Prioritizing Reliability When Milliseconds Aren&#39;t Enough</title><link href="https://byteaether.github.io/2025/prioritizing-reliability-when-milliseconds-arent-enough/"><updated>2025-06-19T00:00:00Z</updated><id>https://byteaether.github.io/2025/prioritizing-reliability-when-milliseconds-arent-enough/</id><content type="html">&lt;p&gt;Universally Unique Lexicographically Sortable Identifiers (ULIDs) represent a significant advancement over traditional UUIDs, offering guaranteed uniqueness (within practical limits), natural sortability by time, and a concise, URL-friendly format. These features make them highly suitable for diverse applications, including database keys, distributed tracing, and event identifiers. While the intricacies of ID generation might seem like a deep concern primarily for high-throughput systems, understanding the underlying design choices is valuable for all developers leveraging such libraries.&lt;/p&gt;&lt;p&gt;A standard ULID consists of a 48-bit timestamp (milliseconds since the Unix epoch) and an 80-bit random component. This structure ensures IDs generally sort chronologically. However, the official specification includes a mechanism to handle multiple IDs generated within the &lt;em&gt;exact same millisecond&lt;/em&gt;: it increments the 80-bit random part sequentially. This leads to a critical question: What happens if this increment causes the 80-bit random part to exceed its maximum value?&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ulid/spec&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The official specification&lt;/a&gt; mandates throwing an overflow exception in this situation. While this adheres strictly to the definition, it introduces a potential point of failure, especially in high-performance systems. Crucially, this isn&#39;t just a theoretical concern that requires generating 2^80 IDs. For the &lt;em&gt;first&lt;/em&gt; ULID generated within a specific millisecond, the 80-bit portion is initialized with a cryptographically random value. If this initial random value happens to be very close to the maximum possible value (all 1&#39;s in binary), even the &lt;em&gt;second&lt;/em&gt; ID generated within that same millisecond could trigger the increment overflow and, consequently, an exception. This makes the overflow a far more probable scenario than one might initially assume based purely on the size of the 80-bit space.&lt;/p&gt;&lt;p&gt;In developing &lt;strong&gt;&lt;a href=&quot;https://byteaether.github.io/series/byteaether-ulid/&quot;&gt;ByteAether.Ulid&lt;/a&gt;&lt;/strong&gt;, our C# implementation available on &lt;a href=&quot;https://github.com/ByteAether/Ulid&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/ByteAether.Ulid&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NuGet&lt;/a&gt;, we recognized the practical implications of this potential exception. We made a deliberate design choice, a documented deviation from the strict specification, to enhance dependability: instead of throwing an exception, &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; allows the increment operation to &lt;em&gt;flow into the 48-bit timestamp part&lt;/em&gt; when the 80-bit random part overflows. This post explains the rationale behind this decision.&lt;/p&gt;&lt;h2 id=&quot;the-overflow-scenario%3A-more-likely-than-you-think&quot; tabindex=&quot;-1&quot;&gt;The Overflow Scenario: More Likely Than You Think&lt;/h2&gt;&lt;p&gt;Consider systems that demand high throughput: real-time analytics pipelines, busy web servers handling rapid requests, IoT data ingestion points, or batch processing jobs churning through records. In these environments, generating multiple unique identifiers within a single millisecond is commonplace.&lt;/p&gt;&lt;p&gt;The ULID specification&#39;s approach ensures monotonicity &lt;em&gt;within&lt;/em&gt; a millisecond by incrementing the random part. For example:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;Ulid.New()&lt;/code&gt; at &lt;code&gt;T&lt;/code&gt; ms: &lt;code&gt;[Timestamp T | Random Value R1]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Ulid.New()&lt;/code&gt; at &lt;code&gt;T&lt;/code&gt; ms again: &lt;code&gt;[Timestamp T | Random Value R1 + 1]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Ulid.New()&lt;/code&gt; at &lt;code&gt;T&lt;/code&gt; ms yet again: &lt;code&gt;[Timestamp T | Random Value R1 + 2]&lt;/code&gt; ... and so on.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The issue arises when &lt;code&gt;Random Value R1 + n&lt;/code&gt; reaches the maximum value representable by 80 bits. As noted earlier, if the initial &lt;code&gt;Random Value R1&lt;/code&gt; generated by the secure random number generator is already near this maximum, it might only take one or two subsequent calls to &lt;code&gt;Ulid.New()&lt;/code&gt; within the same millisecond to hit the ceiling, if the initial random draw was exceptionally unlucky (i.e., very close to the maximum).&lt;/p&gt;&lt;p&gt;An implementation strictly following the spec would then throw an exception. This creates significant challenges:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Reduced Reliability:&lt;/strong&gt; ID generation, a typically background concern, becomes a potential source of runtime failure, especially under peak load conditions where reliability is most critical.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Increased Complexity &amp;amp; Performance Impact:&lt;/strong&gt; Developers must anticipate and handle these exceptions. &lt;code&gt;try-catch&lt;/code&gt; blocks, particularly when an exception is actually thrown, can incur a non-trivial performance cost, especially in very hot code paths like ID generation. This might lead to implementing retry logic or other workarounds that add complexity and can negatively impact the very performance ULIDs are often chosen to support.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;update%3A-the-impact-of-random-increments-on-overflow-probability&quot; tabindex=&quot;-1&quot;&gt;Update: The Impact of Random Increments on Overflow Probability&lt;/h3&gt;&lt;p&gt;With the release of &lt;strong&gt;&lt;a href=&quot;https://byteaether.github.io/2025/byteaetherulid-v130-enhanced-ulid-generation-control-and-security/&quot;&gt;ByteAether.Ulid v1.3.0&lt;/a&gt;&lt;/strong&gt;, our decision to handle random-part overflow by incrementing the timestamp has become even more critical and relevant. The previous monotonic generation behavior, which incremented the random part by a fixed value of 1, made the overflow scenario more likely than one might assume, especially if the initial random value was close to the maximum.&lt;/p&gt;&lt;p&gt;The new &lt;strong&gt;&lt;code&gt;GenerationOptions&lt;/code&gt;&lt;/strong&gt; configuration object introduces several &lt;code&gt;MonotonicRandomXByte&lt;/code&gt; options, which enhance security by allowing the increment value to be a random number. This value can range from 1 to 256 for &lt;code&gt;MonotonicRandom1Byte&lt;/code&gt;, up to 1 to 4 294 967 296 for &lt;code&gt;MonotonicRandom4Byte&lt;/code&gt;. While this adds an important layer of security against enumeration attacks, it also significantly increases the probability of an 80-bit random part overflow occurring within a single millisecond.&lt;/p&gt;&lt;p&gt;Consider a scenario where &lt;code&gt;MonotonicRandom4Byte&lt;/code&gt; is used. A cryptographically secure random provider could generate an initial 80-bit random component close to the maximum value, and the very next ULID generated in that same millisecond could have an increment value of 2^32, causing an immediate overflow.&lt;/p&gt;&lt;p&gt;Our approach of allowing the increment to flow into the timestamp directly addresses this increased risk. Instead of a predictable, linear march toward a potential exception, the new random increments make the overflow threshold far more volatile. By not throwing an exception and instead seamlessly incrementing the timestamp, our implementation ensures continued, reliable operation under these new, more complex generation scenarios, reinforcing its value for robust and high-throughput systems.&lt;/p&gt;&lt;h2 id=&quot;considering-the-alternatives&quot; tabindex=&quot;-1&quot;&gt;Considering the Alternatives&lt;/h2&gt;&lt;p&gt;When faced with the random-part overflow, beyond throwing an exception (as per the spec), several strategies exist:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Delay Generation:&lt;/strong&gt; This approach involves pausing the generation thread until the system clock advances to the next millisecond. While ensuring the timestamp strictly reflects the wall-clock time (or a later one), it introduces artificial latency. Halting execution, even briefly, can create significant bottlenecks in high-throughput systems, effectively throttling the application&#39;s performance based on clock resolution rather than processing capability. This often defeats the purpose of using efficient ID generation.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Force Initial MSB to Zero:&lt;/strong&gt; This technique modifies the generation of the &lt;em&gt;initial&lt;/em&gt; random value (&lt;code&gt;R1&lt;/code&gt; in the example above) within a millisecond. The most significant bit (MSB) of the 80-bit random part is always set to 0. This effectively means the initial random value is always less than 2^79. Consequently, at least 2^79 increments are guaranteed to be possible within that millisecond before the 80-bit value overflows.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Drastically reduces the &lt;em&gt;probability&lt;/em&gt; of encountering an overflow, as 2^79 increments within a single millisecond is practically impossible on current hardware. It eliminates the &amp;quot;bad luck&amp;quot; scenario where the first random value is already near the maximum.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It doesn&#39;t technically &lt;em&gt;eliminate&lt;/em&gt; the overflow problem, it just pushes the threshold extremely high. A decision is &lt;em&gt;still&lt;/em&gt; required for what to do if that 2^79 limit is somehow reached (throw, delay, or increment timestamp). It also slightly reduces the initial entropy from 80 bits to 79 bits, though this effect on collision probability is generally negligible. Fundamentally, it mitigates the likelihood but not the existence of the overflow condition itself.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Allow Overflow into Timestamp:&lt;/strong&gt; This is the strategy implemented in &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt;. When the 80-bit random part reaches its limit and needs to increment, the increment operation carries over, increasing the 48-bit timestamp component by one millisecond. The practical effect is that the generated ULID might have a timestamp slightly &amp;quot;ahead&amp;quot; of the precise system clock time at the moment of generation.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Comparing these, the &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; approach directly addresses the &lt;em&gt;consequence&lt;/em&gt; of the overflow by providing a non-blocking, non-exception-throwing resolution, regardless of how likely the overflow is. We contend that this provides the optimal blend of performance, reliability, and practical sortability for demanding applications.&lt;/p&gt;&lt;h2 id=&quot;understanding-the-impact%3A-monotonicity-in-practice&quot; tabindex=&quot;-1&quot;&gt;Understanding the Impact: Monotonicity in Practice&lt;/h2&gt;&lt;p&gt;A natural question regarding the timestamp overflow approach is its effect on ULID&#39;s sortability and monotonicity guarantees. It&#39;s essential to analyze this within realistic contexts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Single-Process Monotonicity is Strictly Preserved:&lt;/strong&gt; This is the cornerstone of the argument. Within a single running process, &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; &lt;em&gt;guarantees&lt;/em&gt; that each call to &lt;code&gt;Ulid.New()&lt;/code&gt; produces a ULID value strictly greater than the previous one. Whether the increment occurs within the 80-bit random part or spills over into the 48-bit timestamp part, the resulting 128-bit value increases. This ensures that IDs generated sequentially &lt;em&gt;by the same generator instance&lt;/em&gt; remain perfectly sortable relative to each other. This is often the most critical monotonicity requirement for use cases like database record ordering within an import batch.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Cross-Process Monotonicity is Inherently Approximate:&lt;/strong&gt; Attempting to achieve strict, guaranteed millisecond-level chronological ordering using ULIDs &lt;em&gt;across different machines or even different processes on the same machine&lt;/em&gt; is inherently unreliable, irrespective of how overflow is handled. Factors like clock skew, network latency, and scheduling jitter mean you cannot reliably assert that &lt;code&gt;ULID_A&lt;/code&gt; generated on &lt;code&gt;Machine_1&lt;/code&gt; at its perceived time &lt;code&gt;T&lt;/code&gt; is strictly less than &lt;code&gt;ULID_B&lt;/code&gt; generated on &lt;code&gt;Machine_2&lt;/code&gt; at its perceived time &lt;code&gt;T + 1ms&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Given this reality, the fact that &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; might, in high-contention scenarios, advance the timestamp by a millisecond due to overflow does not practically diminish the utility of ULIDs for cross-process chronological estimation. The timestamp remains a highly accurate representation of the generation time. Crucially, this &amp;quot;future-drift&amp;quot; is typically only by a single millisecond; once the timestamp increments, the subsequent ULID generated in this &amp;quot;new&amp;quot; millisecond has the full 2^80 range for its random component, making further immediate overflows into the timestamp exceptionally unlikely. This minimal adjustment is well within the margin of error already introduced by system clocks and network effects, and it prevents generation failure without meaningfully impacting the approximate sortability expected in distributed contexts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Alternative - Centralized ID Generation:&lt;/strong&gt; One could achieve stronger cross-instance monotonicity by funneling all ID requests through a dedicated, single-instance &amp;quot;ID Generator Service.&amp;quot; This service could maintain strict ordering. However, this introduces significant drawbacks: primarily, &lt;strong&gt;network latency&lt;/strong&gt; for every ID request and a &lt;strong&gt;single point of failure/bottleneck&lt;/strong&gt;. This contrasts sharply with the benefit of ULIDs: fast, decentralized, in-process generation. For systems prioritizing low-latency generation, the centralized approach is often impractical.&lt;/p&gt;&lt;p&gt;In summary, &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt;&#39;s approach trades theoretical timestamp purity (which is already compromised in distributed systems) for practical reliability and performance, while fully preserving the critical single-process monotonicity guarantee.&lt;/p&gt;&lt;h2 id=&quot;why-reliable-monotonicity-matters%3A-the-data-import-example&quot; tabindex=&quot;-1&quot;&gt;Why Reliable Monotonicity Matters: The Data Import Example&lt;/h2&gt;&lt;p&gt;Let&#39;s revisit the large-scale data import workflow to illustrate the value of &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt;&#39;s reliable single-process monotonicity. A single process reads millions of source records, transforms them, assigns a ULID, and inserts them into a database.&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Simplified Example using ByteAether.Ulid&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataImporter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IDatabaseRepository&lt;/span&gt; _repository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ... constructor ...&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ImportData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SourceRecord&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; sourceRecords&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; recordsToInsert &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TargetRecord&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; sourceRecord &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; sourceRecords&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ByteAether.Ulid handles potential same-ms overflow gracefully&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Potential high-frequency generation here!&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Ulid&lt;/span&gt; newId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Ulid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; targetRecord &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;TargetRecord&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... other fields ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; recordsToInsert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetRecord&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; _repository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BulkInsert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;recordsToInsert&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ... other methods and record definitions ...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Advantages in this Scenario:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Dependable High-Speed Operation:&lt;/strong&gt; The import can run at full speed. Even if bursts occur where the random part of the ULID would overflow (potentially after just one previous generation in the same millisecond if the initial random value was high), &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; seamlessly increments the timestamp and continues generation without throwing exceptions. This prevents job failures and avoids the need for complex error handling around &lt;code&gt;Ulid.New()&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Preserved Processing Order:&lt;/strong&gt; Because each &lt;code&gt;newId&lt;/code&gt; is guaranteed to be greater than the last within this import process, the generated IDs maintain the sequence in which records were handled. If used as a clustered primary key, this aids database insertion performance and allows efficient time-based range queries on the imported batch. The sequence is inherent in the IDs themselves.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;No Artificial Bottlenecks:&lt;/strong&gt; Unlike a delay-based approach, &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; doesn&#39;t artificially throttle the import speed based on millisecond clock ticks, allowing the system to utilize its full processing power.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Using an implementation that throws exceptions could lead to sporadic, hard-to-reproduce failures during large imports. Using one that delays would unnecessarily extend the import duration. Using the MSB=0 approach would make failures &lt;em&gt;extremely&lt;/em&gt; unlikely, but still theoretically possible, requiring a fallback strategy (like throwing or delaying anyway) that doesn&#39;t offer the same definitive resolution. &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; provides a direct, reliable handling mechanism.&lt;/p&gt;&lt;h2 id=&quot;a-pragmatic-choice-for-robust-systems&quot; tabindex=&quot;-1&quot;&gt;A Pragmatic Choice for Robust Systems&lt;/h2&gt;&lt;p&gt;The decision in &lt;strong&gt;ByteAether.Ulid&lt;/strong&gt; to handle random-part overflow by incrementing the timestamp is a pragmatic one, driven by the need for reliability and performance in real-world applications. It recognizes that the overflow scenario is more likely than a simple 2^80 calculation suggests due to the random starting point within each millisecond.&lt;/p&gt;&lt;p&gt;This approach:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensures &lt;strong&gt;dependability&lt;/strong&gt; by eliminating a source of exceptions in high-throughput scenarios.&lt;/li&gt;&lt;li&gt;Maintains &lt;strong&gt;performance&lt;/strong&gt; by avoiding the latency introduced by delay-based strategies and the overhead of frequent exception handling.&lt;/li&gt;&lt;li&gt;Guarantees &lt;strong&gt;strict single-process monotonicity&lt;/strong&gt;, preserving the most reliable and often most crucial sortability aspect of ULIDs.&lt;/li&gt;&lt;li&gt;Acknowledges that &lt;strong&gt;cross-process millisecond ordering&lt;/strong&gt; is already approximate, making the minor, typically single-millisecond timestamp adjustment during overflow insignificant in that context.&lt;/li&gt;&lt;li&gt;Provides a &lt;strong&gt;definitive handling mechanism&lt;/strong&gt;, unlike approaches that merely reduce the &lt;em&gt;likelihood&lt;/em&gt; of overflow without specifying the ultimate fallback.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While representing a documented deviation from the specification&#39;s exception-throwing behavior, this design choice prioritizes building robust, performant systems that can handle demanding workloads without faltering. We believe this makes &lt;strong&gt;&lt;a href=&quot;https://github.com/ByteAether/Ulid&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ByteAether.Ulid&lt;/a&gt;&lt;/strong&gt; a strong choice for developers needing fast, reliable, and sortable unique identifiers in C#.&lt;/p&gt;</content></entry><entry><title>Announcing ByteAether.WeakEvent v1.0.0</title><link href="https://byteaether.github.io/2025/announcing-byteaetherweakevent-v100/"><updated>2025-03-18T00:00:00Z</updated><id>https://byteaether.github.io/2025/announcing-byteaetherweakevent-v100/</id><content type="html">&lt;p&gt;We are thrilled to announce the release of &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;ByteAether.WeakEvent v1.0.0&lt;/strong&gt;&lt;/a&gt;, a NuGet library designed to revolutionize event management in .NET. This release marks the culmination of months of development, testing, and community feedback. With a focus on memory safety and ease-of-use, ByteAether.WeakEvent empowers software engineers and architects to build decoupled, maintainable, and high-performance applications without the pitfalls of memory leaks caused by traditional event subscriptions.&lt;/p&gt;&lt;h2 id=&quot;tackling-a-common-challenge-in-.net&quot; tabindex=&quot;-1&quot;&gt;Tackling a Common Challenge in .NET&lt;/h2&gt;&lt;p&gt;In modern .NET applications, event-driven programming is ubiquitous. Whether you are developing rich desktop experiences with WPF, dynamic web applications with Blazor, or any event-based system, managing event subscriptions efficiently is critical. A common challenge is that the standard event subscription model holds strong references to subscribers, often leading to unintended memory retention and, ultimately, memory leaks.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;weak event pattern&lt;/strong&gt; offers a solution by holding references to event subscribers weakly. In this model, the garbage collector can reclaim subscriber memory even when they remain subscribed to an event, provided no other strong references exist. This release of ByteAether.WeakEvent brings this pattern to your fingertips with a clean API, automatic cleanup of defunct subscriptions, and a robust publish‚Äìsubscribe mechanism tailored for .NET applications.&lt;/p&gt;&lt;p&gt;For more details on the concepts behind weak events and publish‚Äìsubscribe patterns, refer to our in-depth article on the subject. You can also check out the &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repository&lt;/a&gt; for source code and additional documentation.&lt;/p&gt;&lt;h2 id=&quot;understanding-the-weak-event-pattern&quot; tabindex=&quot;-1&quot;&gt;Understanding the Weak Event Pattern&lt;/h2&gt;&lt;h3 id=&quot;what-is-a-weak-event%3F&quot; tabindex=&quot;-1&quot;&gt;What Is a Weak Event?&lt;/h3&gt;&lt;p&gt;In conventional .NET event handling, the publisher holds a strong reference to each subscriber through its delegate list. If subscribers are not explicitly removed, these references persist, keeping objects in memory even after they are no longer needed. This is the primary cause of memory leaks in event-driven systems.&lt;/p&gt;&lt;p&gt;A &lt;strong&gt;weak event&lt;/strong&gt; solves this by holding subscribers via weak references. A weak reference permits the garbage collector to reclaim an object&#39;s memory if no other strong references exist. This behavior is especially useful in scenarios where the publisher has a longer lifetime than its subscribers.&lt;/p&gt;&lt;h3 id=&quot;the-theory-behind-weak-references&quot; tabindex=&quot;-1&quot;&gt;The Theory Behind Weak References&lt;/h3&gt;&lt;p&gt;As explained in foundational materials on weak event management:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Memory Efficiency:&lt;/strong&gt; Weak references ensure that an object is not kept alive solely by its event subscription.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Decoupled Design:&lt;/strong&gt; Publishers and subscribers can evolve independently, fostering better modularity.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Automatic Cleanup:&lt;/strong&gt; There is no need to worry about manually unsubscribing every time a component is disposed. The weak reference mechanism handles cleanup, thereby reducing the risk of human error.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Consider this simplified code example that demonstrates the essence of weak references in event handling:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// List of weak references to event handlers&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;EventHandler&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _handlers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EventHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _handlers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;EventHandler&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RaiseEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; weakHandler &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _handlers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;weakHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EventArgs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Empty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this model, event subscribers are not held strongly, which allows the garbage collector to reclaim memory for any subscriber that is no longer in use.&lt;/p&gt;&lt;h2 id=&quot;key-benefits-of-byteaether.weakevent&quot; tabindex=&quot;-1&quot;&gt;Key Benefits of ByteAether.WeakEvent&lt;/h2&gt;&lt;h3 id=&quot;memory-efficiency-and-automatic-cleanup&quot; tabindex=&quot;-1&quot;&gt;Memory Efficiency and Automatic Cleanup&lt;/h3&gt;&lt;p&gt;One of the primary advantages of using ByteAether.WeakEvent is its ability to manage memory efficiently. By storing subscribers as weak references, the library ensures that objects are not unnecessarily held in memory. This is particularly beneficial for applications with long lifetimes, where small memory leaks can accumulate over time and degrade performance.&lt;/p&gt;&lt;h3 id=&quot;simplified-event-management&quot; tabindex=&quot;-1&quot;&gt;Simplified Event Management&lt;/h3&gt;&lt;p&gt;Traditionally, developers must be vigilant in manually unsubscribing events‚Äîan often error-prone process. ByteAether.WeakEvent automates the cleanup process by removing dead references whenever an event is raised. This simplifies event management, reduces boilerplate code, and minimizes the risk of memory leaks.&lt;/p&gt;&lt;h3 id=&quot;versatility-across-application-types&quot; tabindex=&quot;-1&quot;&gt;Versatility Across Application Types&lt;/h3&gt;&lt;p&gt;The library is designed to be flexible:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Events With or Without Data:&lt;/strong&gt; Whether you need to send event data or simply signal that an event has occurred, ByteAether.WeakEvent provides a straightforward API for both scenarios.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Support for Asynchronous Patterns:&lt;/strong&gt; With native support for asynchronous publishing, the library is well-suited for modern application architectures that leverage async/await patterns.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Ideal for UI Frameworks:&lt;/strong&gt; In frameworks like Blazor, where component lifecycles can be complex, the library&#39;s weak reference management ensures that components are garbage collected promptly after disposal.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;exploring-the-api-and-usage-examples&quot; tabindex=&quot;-1&quot;&gt;Exploring the API and Usage Examples&lt;/h2&gt;&lt;h3 id=&quot;simple-event-subscription&quot; tabindex=&quot;-1&quot;&gt;Simple Event Subscription&lt;/h3&gt;&lt;p&gt;For events that do not require additional data, the API is as simple as subscribing a handler and publishing the event:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;ByteAether&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WeakEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Create an instance of the weak event without event data&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; myEvent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WeakEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Create a subscriber and subscribe&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; subscriber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Event received!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; myEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Raise the event&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; myEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PublishAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, the handler is invoked if its target is still alive. Dead subscribers are automatically pruned from the subscription list when the event is raised.&lt;/p&gt;&lt;h3 id=&quot;event-subscription-with-data&quot; tabindex=&quot;-1&quot;&gt;Event Subscription with Data&lt;/h3&gt;&lt;p&gt;When you need to transmit data along with the event, the &lt;code&gt;WeakEvent&amp;lt;TEvent&amp;gt;&lt;/code&gt; class comes into play:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;ByteAether&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WeakEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Create an instance of the weak event with event data&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; myEvent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WeakEvent&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;MyEventData&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Create a subscriber and subscribe&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; subscriber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyEventData&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Received: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; myEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Raise the event with data&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; myEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PublishAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MyEventData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Define your event data&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyEventData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This approach allows your events to be rich in context, with subscribers receiving any necessary data without compromising the integrity of the memory management system.&lt;/p&gt;&lt;h2 id=&quot;how-byteaether.weakevent-works-under-the-hood&quot; tabindex=&quot;-1&quot;&gt;How ByteAether.WeakEvent Works Under the Hood&lt;/h2&gt;&lt;h3 id=&quot;the-publish%E2%80%93subscribe-paradigm&quot; tabindex=&quot;-1&quot;&gt;The Publish‚ÄìSubscribe Paradigm&lt;/h3&gt;&lt;p&gt;At its core, ByteAether.WeakEvent embraces the &lt;strong&gt;publish‚Äìsubscribe&lt;/strong&gt; model, a design pattern that decouples the event publisher from its subscribers. In this architecture:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Publishers&lt;/strong&gt; emit events without any knowledge of which components are listening.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Subscribers&lt;/strong&gt; listen for events and react accordingly, without the need for explicit deregistration.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This decoupling not only simplifies code but also enhances scalability and maintainability‚Äîattributes that are critical in both desktop and web applications.&lt;/p&gt;&lt;h3 id=&quot;detailed-implementation-insights&quot; tabindex=&quot;-1&quot;&gt;Detailed Implementation Insights&lt;/h3&gt;&lt;p&gt;The library leverages the built-in .NET &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/weak-references&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;WeakReference&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to hold event subscribers. When an event is published:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It iterates through the list of weak references.&lt;/li&gt;&lt;li&gt;Attempts to retrieve the target object for each subscriber.&lt;/li&gt;&lt;li&gt;Invokes the event handler only if the target is still alive.&lt;/li&gt;&lt;li&gt;Cleans up any references that have been collected by the garbage collector.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This strategy ensures that your application&#39;s memory footprint remains minimal, as there is no lingering of obsolete event handlers. Detailed examples and explanations can be found in our &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;documentation&lt;/a&gt; and our in-depth article on the weak event pattern.&lt;/p&gt;&lt;h2 id=&quot;real-world-applications-and-scenarios&quot; tabindex=&quot;-1&quot;&gt;Real-World Applications and Scenarios&lt;/h2&gt;&lt;h3 id=&quot;ui-development-with-blazor-and-wpf&quot; tabindex=&quot;-1&quot;&gt;UI Development with Blazor and WPF&lt;/h3&gt;&lt;p&gt;In UI frameworks such as Blazor and WPF, the lifecycle management of components is crucial. Consider a Blazor component that subscribes to events during its initialization:&lt;/p&gt;&lt;pre class=&quot;language-razor&quot;&gt;&lt;code class=&quot;language-razor&quot;&gt;&lt;span class=&quot;token block&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;token csharp language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Inject&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Publisher&lt;/span&gt; _publisher &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnInitialized&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OnPublish&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyEventData&lt;/span&gt; eventData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Event received in Blazor component.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// No need to manually unsubscribe, the weak reference handles cleanup.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this scenario, even if a component is disposed, its subscription does not prevent garbage collection. This is a critical advantage in long-running applications where manual unsubscription could be easily overlooked, leading to potential memory leaks.&lt;/p&gt;&lt;h3 id=&quot;server-side-and-distributed-systems&quot; tabindex=&quot;-1&quot;&gt;Server-Side and Distributed Systems&lt;/h3&gt;&lt;p&gt;For backend services and distributed systems, resource management is paramount. ByteAether.WeakEvent&#39;s ability to automatically manage event subscriptions means that your server-side applications can scale more reliably. When objects are no longer in use, they are automatically cleaned up, reducing the overhead associated with manual memory management and ensuring smoother performance.&lt;/p&gt;&lt;h3 id=&quot;cross-platform-benefits&quot; tabindex=&quot;-1&quot;&gt;Cross-Platform Benefits&lt;/h3&gt;&lt;p&gt;While our focus is on .NET, the principles behind weak event management apply broadly across programming environments. Whether you are working with JavaScript&#39;s reactive libraries, Java&#39;s weak references, or even observer patterns in C++, the core concept remains the same: decoupling event publishers from subscribers results in more resilient and maintainable systems.&lt;/p&gt;&lt;h2 id=&quot;getting-started-with-byteaether.weakevent&quot; tabindex=&quot;-1&quot;&gt;Getting Started with ByteAether.WeakEvent&lt;/h2&gt;&lt;h3 id=&quot;installation-made-easy&quot; tabindex=&quot;-1&quot;&gt;Installation Made Easy&lt;/h3&gt;&lt;p&gt;The ByteAether.WeakEvent library is available as a &lt;a href=&quot;https://www.nuget.org/packages/ByteAether.WeakEvent/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NuGet package&lt;/a&gt;. To install, simply run:&lt;/p&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package ByteAether.WeakEvent&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For those who wish to experiment with the latest features, you can also specify a preview version using the &lt;code&gt;--version&lt;/code&gt; option.&lt;/p&gt;&lt;h3 id=&quot;documentation-and-community&quot; tabindex=&quot;-1&quot;&gt;Documentation and Community&lt;/h3&gt;&lt;p&gt;For comprehensive documentation, API details, and additional usage examples, please visit the &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repository&lt;/a&gt;. We encourage contributions and feedback from the community. If you encounter any issues or have suggestions, feel free to open an issue or submit a pull request.&lt;/p&gt;&lt;h2 id=&quot;a-new-era-of-event-management-in-.net&quot; tabindex=&quot;-1&quot;&gt;A New Era of Event Management in .NET&lt;/h2&gt;&lt;p&gt;ByteAether.WeakEvent v1.0.0 sets a new standard for event handling in .NET. By embracing the weak event pattern, the library not only addresses common pitfalls like memory leaks but also simplifies your codebase, allowing you to focus on building great features. Whether you are developing desktop applications, dynamic web apps, or large-scale distributed systems, this library is designed to make your event-driven programming more efficient, robust, and maintainable.&lt;/p&gt;&lt;p&gt;We invite software engineers and architects to integrate ByteAether.WeakEvent into their projects and experience the benefits of a lean, memory-safe event management system. Explore the &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub repository&lt;/a&gt; and get started today!&lt;/p&gt;&lt;p&gt;Happy coding!&lt;/p&gt;</content></entry><entry><title>HyperAction API: A Reimagined Approach to HTTP API Design</title><link href="https://byteaether.github.io/2025/hyperaction-api-a-reimagined-approach-to-http-api-design/"><updated>2025-03-11T00:00:00Z</updated><id>https://byteaether.github.io/2025/hyperaction-api-a-reimagined-approach-to-http-api-design/</id><content type="html">&lt;p&gt;Traditional &lt;a href=&quot;https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;REST&lt;/a&gt; designs emphasize &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CRUD&lt;/a&gt; operations over distinct business actions, forcing developers to implement significant business logic on the client side while backends simply translate raw database records into HTTP responses. As a result, the intended business rules become obscured and must be redundantly re-implemented on the server side‚Äîcomplicating maintenance and creating security vulnerabilities.&lt;/p&gt;&lt;p&gt;One major flaw arises from shared data models that are designed around generic resources rather than tailored to specific business features. For example, a single &amp;quot;User&amp;quot; endpoint might return all associated details‚Äîincluding sensitive fields like email addresses‚Äîeven when the client requires only a list of online usernames. This forces clients to make multiple API calls to compile the necessary data and increases the risk of unintended data exposure.&lt;/p&gt;&lt;p&gt;In contrast, adopting a &lt;a href=&quot;https://www.jimmybogard.com/vertical-slice-architecture/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vertical slice architecture&lt;/a&gt;‚Äîwhere each feature or business action is developed as a self-contained unit (encapsulating all layers from user interface to data access)‚Äîdirectly addresses these issues. Vertical slices isolate business logic, ensuring that changes in one domain do not affect unrelated parts of the system. This approach simplifies development and maintenance while aligning API behavior with specific business capabilities.&lt;/p&gt;&lt;p&gt;Drawing on extensive experience with both large-scale and smaller applications, the HyperAction API convention reimagines HTTP API design by centering endpoints around clear, action-oriented business operations. This method enhances security, minimizes redundancy, and fosters a more maintainable system architecture.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This document outlines the technical guidelines for the new &lt;strong&gt;HyperAction API&lt;/strong&gt; convention. Departing from traditional REST paradigms, HyperAction API enforces batch processing at every endpoint, aligns endpoints with specific business actions, and incorporates explicit mechanisms for consistency and asynchronous operations. The objective is to create a clear and efficient contract between clients and servers that minimizes the common pitfalls of REST while meeting modern application needs.&lt;/p&gt;&lt;p&gt;Each design decision is explained by comparing conventional REST approaches with their challenges, then detailing our design decisions with updated examples that adhere to the batching principle.&lt;/p&gt;&lt;h2 id=&quot;key-concepts&quot; tabindex=&quot;-1&quot;&gt;Key Concepts&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vertical Slice Architecture:&lt;/strong&gt; A design approach where each business feature is developed as a self-contained unit, encapsulating all necessary layers (from user interface to data access). This minimizes interdependencies and simplifies maintenance.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Action-Oriented Endpoints:&lt;/strong&gt; Endpoints designed to execute specific business operations rather than generic CRUD functions, ensuring that business logic is directly integrated into the API.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Batch Processing:&lt;/strong&gt; The practice of handling multiple data items in a single API call, which promotes atomic operations and reduces the need for multiple round-trips between the client and server.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;1.-use-singular-naming-conventions&quot; tabindex=&quot;-1&quot;&gt;1. Use Singular Naming Conventions&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Many REST APIs use plural names (e.g., &lt;code&gt;/users&lt;/code&gt;, &lt;code&gt;/orders&lt;/code&gt;) to indicate collections of resources. This approach can be ambiguous when handling irregular plurals.&lt;/p&gt;&lt;h3 id=&quot;challenges&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Plural names may lead to confusion with irregular words‚Äîsuch as &amp;quot;mouse&amp;quot; versus &amp;quot;mice&amp;quot; or &amp;quot;octopus&amp;quot; versus &amp;quot;octopi&amp;quot;‚Äîand can complicate the mental model of the API. In a batch-based system where every endpoint already handles multiple items, the plurality is implied by the data structure, not the endpoint name.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;In HyperAction API, all endpoint and model names are singular. Even though requests and responses always use arrays, the endpoint name itself represents the individual item type. This convention avoids ambiguity, simplifies naming, and reinforces that the batch behavior is a global characteristic of the API.&lt;/p&gt;&lt;h4 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;An endpoint to retrieve users is named singularly:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/user?limit=10&amp;amp;offset=0&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;OK&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;10&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Limit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;10&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;0&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alice&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bob&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similarly, a business action such as account verification remains singular:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/account/verify&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ABC123XYZ&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;207&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;Multi-Status&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This naming convention clarifies that although each payload contains multiple items, the fundamental unit of operation remains singular.&lt;/p&gt;&lt;h2 id=&quot;2.-headers-instead-of-envelope-models&quot; tabindex=&quot;-1&quot;&gt;2. Headers Instead of Envelope Models&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-1&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Many APIs wrap data in envelope objects that include metadata like status and pagination details, leading to additional nesting and complexity.&lt;/p&gt;&lt;h3 id=&quot;challenges-1&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;The extra layer of an envelope model forces clients to parse both the data and metadata, which complicates the data extraction and processing logic.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-1&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Responses for list endpoints return a raw array of items. Metadata such as total count, offset, and limit is communicated exclusively through HTTP headers like &lt;code&gt;X-Count&lt;/code&gt;, &lt;code&gt;X-Total-Count&lt;/code&gt;, &lt;code&gt;X-Limit&lt;/code&gt;, and &lt;code&gt;X-Offset&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&quot;example-1&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;A product listing request:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/product?limit=20&amp;amp;offset=0&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;OK&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;20&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Total-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;250&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Limit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;20&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;0&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;productId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Widget A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9.99&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;productId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Widget B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12.99&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Based on &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6648&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;RFC 6648&lt;/a&gt;, the &amp;quot;X-&amp;quot; prefix on custom headers is not a requirement. This document does not enforce the use of the &amp;quot;X-&amp;quot; prefix; however, the examples include it because this naming convention is widely recognized and helps make custom headers easier to read and understand.&lt;/p&gt;&lt;h2 id=&quot;3.-batch-endpoints-for-all-operations&quot; tabindex=&quot;-1&quot;&gt;3. Batch Endpoints for All Operations&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-2&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;RESTful designs typically offer endpoints such as &lt;code&gt;GET /items/{id}&lt;/code&gt; or &lt;code&gt;PUT /items/{id}&lt;/code&gt; that focus on individual resources. When multiple items must be handled, the client is forced to make several calls or use loosely defined batch endpoints.&lt;/p&gt;&lt;h3 id=&quot;challenges-2&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Focusing on single resources increases round-trips and may lead to inconsistency when operations naturally involve multiple entities. It also forces clients to stitch together logic for batch processing, which can become cumbersome.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-2&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Every endpoint in HyperAction API is a batch endpoint. There is no dedicated endpoint for a single-item operation; instead, all operations‚Äîwhether for retrieval, creation, or update‚Äîare designed to work with arrays. This not only ensures atomic, batch-based processing but also enforces a mindset where the client always works with collections of data.&lt;/p&gt;&lt;h4 id=&quot;example-2&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;To retrieve items, a client issues:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/item?filter=id:123,456&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;OK&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;2&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Total-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;2&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Limit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;50&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;0&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Item One&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14.99&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Item Two&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7.99&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4.-pagination-using-limit-and-offset&quot; tabindex=&quot;-1&quot;&gt;4. Pagination Using Limit and Offset&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-3&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Many REST APIs use &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;pageSize&lt;/code&gt; parameters, which hide the actual dataset position and force clients to convert page numbers into offsets.&lt;/p&gt;&lt;h3 id=&quot;challenges-3&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;The abstract concept of a page makes it harder to implement progressive loading or infinite scrolling. Clients must perform additional calculations to determine the proper slice of data.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-3&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Endpoints return list results using explicit &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; parameters. This clear slicing method allows clients to directly control the amount of data and its position, simplifying custom pagination logic.&lt;/p&gt;&lt;h4 id=&quot;example-3&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;A request for a subset of orders:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/order?limit=50&amp;amp;offset=100&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;OK&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;50&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Total-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;1000&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Limit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;50&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;100&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;orderId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99.99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;completed&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;orderId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;149.99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pending&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With efficient pagination established, we now turn to designing endpoints that reflect discrete business actions‚Äîensuring that each endpoint aligns with a specific operational capability.&lt;/p&gt;&lt;h2 id=&quot;5.-business-logic%E2%80%93specific-endpoints&quot; tabindex=&quot;-1&quot;&gt;5. Business Logic‚ÄìSpecific Endpoints&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-4&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Generic endpoints such as &lt;code&gt;/users&lt;/code&gt; or &lt;code&gt;/orders&lt;/code&gt; attempt to cover all CRUD operations and often reuse generic models, which may lead to oversharing of data or the mixing of unrelated business logic.&lt;/p&gt;&lt;h3 id=&quot;challenges-4&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Using a single resource endpoint for various actions increases the risk of exposing unnecessary details and complicates segregation of business processes.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-4&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Each endpoint is crafted for a specific business action. Every business-logic action endpoint now receives and responds with arrays of items, ensuring that the interface naturally supports batch processing.&lt;/p&gt;&lt;h4 id=&quot;example-4&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;For account verification, instead of a single-object payload, the endpoint handles an array of verification requests:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/account/verify&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ABC123XYZ&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;207&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;Multi-Status&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This design keeps the interface consistent with batch processing while encapsulating business logic within dedicated endpoints. By designing endpoints specifically for discrete business actions, we sidestep the pitfalls of generic data handling and establish a clear, action-oriented approach to API design.&lt;/p&gt;&lt;h2 id=&quot;6.-action-oriented-endpoints-over-crud&quot; tabindex=&quot;-1&quot;&gt;6. Action-Oriented Endpoints over CRUD&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-5&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Traditional CRUD endpoints focus solely on direct data manipulation and tend to oversimplify underlying business processes. This design forces clients to manage critical business logic‚Äîoften duplicating effort and increasing security risks‚Äîwhile the backend merely acts as a conduit for raw data.&lt;/p&gt;&lt;h3 id=&quot;challenges-5&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Generic CRUD endpoints can force clients to manage business rules or risk unwanted side effects by treating operations as mere data transformations.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-5&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Endpoints are explicitly designed for business actions. Even when these endpoints appear similar, they are modeled with distinct request and response payloads‚Äîand both are arrays. This makes the intended action explicit and separates it from simple data manipulation.&lt;/p&gt;&lt;h4 id=&quot;example-5&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;For an address change, the API now expects an array of address change requests:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/account/change-address&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;123 New Street, Cityville, Country&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;207&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;Multi-Status&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This explicit batching reinforces the notion that operations are designed for multiple items at once.&lt;/p&gt;&lt;p&gt;The HyperAction API employs action-oriented endpoints that integrate business logic directly into each operation. By embedding the intended business actions within the API itself, these endpoints offer clearer semantics and enhanced security. This shift not only streamlines client interactions by reducing the need for multiple calls but also ensures that each endpoint directly reflects a distinct business capability.&lt;/p&gt;&lt;h2 id=&quot;7.-crud-like-operations-via-form-loading-and-saving&quot; tabindex=&quot;-1&quot;&gt;7. CRUD-Like Operations via Form Loading and Saving&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-6&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Typically, REST APIs implement simple CRUD endpoints for basic data manipulation without substantial business logic. This often results in &amp;quot;proxy&amp;quot; endpoints that merely transfer data from the client to the database without additional contextual processing.&lt;/p&gt;&lt;p&gt;The approach described here is most applicable to systems where the frontend and backend are developed together as a single, cohesive unit. In tightly integrated environments, close coordination between UI requirements and backend implementations can be achieved, making form loading and saving an effective pattern for streamlining data handling and reducing the need for redundant API calls. Conversely, for general public APIs‚Äîwhere the consumer or client code is developed by external parties‚Äîa more standardized and decoupled approach using traditional CRUD endpoints may be preferable to accommodate the varied requirements and integration patterns of third-party developers.&lt;/p&gt;&lt;h3 id=&quot;challenges-6&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Data Pre-Filling:&lt;/strong&gt; When editing an entry, the form should be pre-populated with existing data and/or default values, a task that generic CRUD endpoints struggle to support.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;UI Requirements:&lt;/strong&gt; For example, drop-down fields might only store an ID in the data payload, while the UI requires a human-readable label for display.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lack of Context:&lt;/strong&gt; Generic CRUD endpoints do not provide the supplementary information necessary to accurately render forms with all required details.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;hyperaction-api-decision-6&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;In HyperAction API, we reconceptualize these operations as &amp;quot;form loading&amp;quot; and &amp;quot;form saving&amp;quot; to address these challenges:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Load Endpoint:&lt;/strong&gt; When a form is opened, a load request is made. This endpoint returns the form model along with additional contextual data (such as ID-to-text mappings for drop-down fields) as a header object, ensuring that the form is pre-filled‚Äîeither with existing data when editing an entry or with default preselected values when creating a new one‚Äîso it is ready for user interaction.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Save Endpoint:&lt;/strong&gt; When a user submits a form, the save endpoint accepts the same form model in its request. This approach ensures that the data, including any hidden identifiers, is consistently validated and processed.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Both endpoints adhere to the batching principle, allowing multiple forms to be loaded or saved in a single request.&lt;/p&gt;&lt;h4 id=&quot;example-6&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;HTTP Request (Loading form)&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/form/user-profile?ids=123,&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response (Loading form)&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;OK&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;2&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Total-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;2&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;{ &quot;roleId&quot;: { 5: &quot;Administrator&quot;, 6: &quot;User&quot; } }&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a1b2c3d4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice@example.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;roleId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;roleId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Request (Saving form)&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/form/user-profile&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Idempotency-Key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;123e4567-e89b-12d3-a456-426614174000&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a1b2c3d4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alice Updated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice.new@example.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;roleId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bob Created&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob.created@example.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;roleId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This dual-endpoint approach for form operations ensures that even simple data manipulations are handled with the same rigor and consistency as more complex business actions, aligning seamlessly with the overarching principles of the HyperAction API convention.&lt;/p&gt;&lt;h2 id=&quot;8.-using-http-status-code-207-(multi-status)-for-batch-operations&quot; tabindex=&quot;-1&quot;&gt;8. Using HTTP Status Code 207 (Multi-Status) for Batch Operations&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-7&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Batch operations often return a generic &lt;code&gt;200 OK&lt;/code&gt; even when different items in the batch yield mixed results, masking individual errors.&lt;/p&gt;&lt;h3 id=&quot;challenges-7&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;A generic status code does not allow clients to easily identify which items in a batch succeeded or failed, complicating error handling and recovery.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-7&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;For operations that process batches with mixed outcomes, the API uses HTTP status code &lt;strong&gt;207 Multi-Status&lt;/strong&gt;. The response body provides an array of per-item status information, giving clients granular feedback.&lt;/p&gt;&lt;h4 id=&quot;example-7&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;A batch update of order statuses:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/order/update-status&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;orderId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;newStatus&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;shipped&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;orderId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;newStatus&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cancelled&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response (207 Multi-Status)&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;207&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;Multi-Status&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;orderId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Status updated successfully&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;orderId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Invalid transition to &#39;cancelled&#39;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;9.-asynchronous-processing-for-long-running-operations&quot; tabindex=&quot;-1&quot;&gt;9. Asynchronous Processing for Long-Running Operations&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-8&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Long-running operations are typically processed synchronously, which may result in timeouts and a poor user experience.&lt;/p&gt;&lt;h3 id=&quot;challenges-8&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Holding a connection open during lengthy processing risks timeouts and duplicated requests, degrading both client and server performance.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-8&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;For operations that take an extended time, asynchronous processing is strongly encouraged. Two strategies are provided:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Callback URL:&lt;/strong&gt; The client submits an array of requests with callback URLs. Once processed, the server calls the provided URL for each item with a minimal payload.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Polling with Job ID:&lt;/strong&gt; Alternatively, the server immediately returns a batch of job identifiers or URLs. Clients can then poll or use long-polling to track each job&#39;s progress.&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;example-(callback-url)&quot; tabindex=&quot;-1&quot;&gt;Example (Callback URL)&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/report/generate&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;reportType&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sales&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;parameters&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2025-02-27&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;callbackUrl&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://client.example.com/report-callback&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;207&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;Multi-Status&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;jobId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;abc123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;202&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This decoupled approach improves reliability and scalability for long-running processes.&lt;/p&gt;&lt;h2 id=&quot;10.-enforcing-idempotency&quot; tabindex=&quot;-1&quot;&gt;10. Enforcing Idempotency&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-9&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;While certain HTTP methods are idempotent, operations that modify state (typically via POST) are not, leading to potential duplicate processing if retried.&lt;/p&gt;&lt;h3 id=&quot;challenges-9&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Without an explicit idempotency mechanism, clients risk accidentally processing the same request multiple times during network retries or failures.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-9&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Every state-modifying action must include an idempotency key, passed as a header (e.g., &lt;code&gt;X-Idempotency-Key&lt;/code&gt;). In line with the batching principle, the endpoint accepts an array of requests, each of which will be deduplicated based on the provided key.&lt;/p&gt;&lt;h4 id=&quot;example-8&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/account/update-email&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Idempotency-Key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;4f2a9c3e-d8f1-4b5e-9a2d-123456789abc&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;new.email@example.com&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The server uses the idempotency key to ensure that duplicate requests do not cause repeated processing.&lt;/p&gt;&lt;h2 id=&quot;11.-caching-and-consistency-with-etags&quot; tabindex=&quot;-1&quot;&gt;11. Caching and Consistency with ETAGs&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-10&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;ETAGs are used for caching and concurrency but are often applied at a coarse level (e.g., per entire response), which is insufficient when handling batches.&lt;/p&gt;&lt;h3 id=&quot;challenges-10&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Without item-level ETAGs, clients may inadvertently overwrite data when updating parts of a batch, risking consistency issues.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-10&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Assign ETAGs to each individual item in a response. When updating items, the client includes the corresponding ETAG for each item in the batch, ensuring updates are based on the latest state.&lt;/p&gt;&lt;h4 id=&quot;example-9&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;Retrieving items with individual ETAGs:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/item?limit=10&amp;amp;offset=0&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;OK&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;10&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Limit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;10&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-Offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;0&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Item One&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a1b2c3d4&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Item Two&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;e5f6g7h8&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When updating, the request carries an array of items with ETAGs:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;PUT&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/item&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Item One Updated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a1b2c3d4&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This mechanism minimizes race conditions and guarantees consistency for batch operations.&lt;/p&gt;&lt;h2 id=&quot;12.-no-api-versioning-in-urls&quot; tabindex=&quot;-1&quot;&gt;12. No API Versioning in URLs&lt;/h2&gt;&lt;h3 id=&quot;traditional-rest-approach-11&quot; tabindex=&quot;-1&quot;&gt;Traditional REST Approach&lt;/h3&gt;&lt;p&gt;Version numbers are commonly embedded in URLs (e.g., &lt;code&gt;/v1/users&lt;/code&gt;, &lt;code&gt;v1.example.com/users&lt;/code&gt;), which can lead to fragmentation and maintenance overhead.&lt;/p&gt;&lt;h3 id=&quot;challenges-11&quot; tabindex=&quot;-1&quot;&gt;Challenges&lt;/h3&gt;&lt;p&gt;Including version numbers in the URL clutters the design and complicates the evolution of the API, especially when changes are either mandatory or better expressed through distinct endpoints.&lt;/p&gt;&lt;p&gt;Version numbers embedded in URLs tend to clutter the API design and force clients to hardcode endpoint paths that may rapidly become outdated. By removing version numbers from the URL and instead leveraging HTTP headers‚Äîsuch as the &lt;code&gt;Accept&lt;/code&gt; and &lt;code&gt;Content-Type&lt;/code&gt; headers‚Äîfor payload negotiation, the API remains clean and adaptable. This strategy allows changes to be introduced without breaking existing client implementations, as the evolution of data formats or business rules can be communicated through header negotiation rather than through separate endpoint versions.&lt;/p&gt;&lt;p&gt;Additionally, relying on versioned endpoints can inadvertently signal that a fundamental business process has changed while still supporting outdated behavior. When a new version of an endpoint introduces breaking changes, it implies that the underlying business process has evolved. In such cases, maintaining the old version not only creates confusion but also contradicts the notion of a genuine process change. Either the business process has indeed changed‚Äîrendering the old endpoint obsolete and in need of removal‚Äîor a completely new business process is introduced, which should be reflected through distinct endpoint naming rather than a simple version increment.&lt;/p&gt;&lt;h3 id=&quot;hyperaction-api-decision-11&quot; tabindex=&quot;-1&quot;&gt;HyperAction API Decision&lt;/h3&gt;&lt;p&gt;Version numbers are removed from URLs. Instead, use HTTP headers such as &lt;code&gt;Accept&lt;/code&gt; and &lt;code&gt;Content-Type&lt;/code&gt; to indicate the payload format or model variant, if necessary. This keeps the endpoint clean and directs versioning concerns to header negotiations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.hmeid.com/blog/just-say-no-to-versioning&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Just say no - to versioning APIs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2016/07/web-api-versioning/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Don&#39;t Version Your Web API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://av.tib.eu/media/48857&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Versions are evil&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.ben-morris.com/rest-apis-dont-need-a-versioning-strategy-they-need-a-change-strategy/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;REST APIs don‚Äôt need a versioning strategy - they need a change strategy&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;example-10&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h4&gt;&lt;p&gt;Consider a client request to the &lt;code&gt;/account/summary&lt;/code&gt; endpoint that negotiates the desired payload format via the &lt;code&gt;Content-Type&lt;/code&gt; and &lt;code&gt;Accept&lt;/code&gt; headers rather than embedding a version number in the URL:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HTTP Request&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token request-line&quot;&gt;&lt;span class=&quot;token method property&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token request-target url&quot;&gt;/account/summary&lt;/span&gt; &lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;api.example.com&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/vnd.example.account-summary-with-balance+json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a successful scenario, the server recognizes the specified version in the headers and responds with the corresponding data model:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Successful HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;OK&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/vnd.example.account-summary-with-balance+json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-API-Status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;Active&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;accountId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;250.75&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively, if the client submits a request using a deprecated accept type (for example, &lt;code&gt;application/vnd.example.account-summary+json&lt;/code&gt;), the server can indicate that this request model is no longer supported. This response clearly communicates that the API no longer supports the outdated version, urging the client to update its request headers:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Deprecated Request HTTP Response&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-http&quot;&gt;&lt;code class=&quot;language-http&quot;&gt;&lt;span class=&quot;token response-status&quot;&gt;&lt;span class=&quot;token http-version property&quot;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&quot;token status-code number&quot;&gt;410&lt;/span&gt; &lt;span class=&quot;token reason-phrase string&quot;&gt;Gone&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;application/json&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token header&quot;&gt;&lt;span class=&quot;token header-name keyword&quot;&gt;X-API-Status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token header-value&quot;&gt;Deprecated&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token application-json&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Not Acceptable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The requested content type &#39;application/vnd.example.account-summary+json&#39; is deprecated and no longer supported. Please update your Accept header to a supported version.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is also acceptable for the server to respond with just the appropriate headers and a &lt;code&gt;410&lt;/code&gt; status code, without any accompanying content.&lt;/p&gt;&lt;p&gt;Note that a draft standardizing the use of a &lt;code&gt;Deprecation&lt;/code&gt; header in HTTP responses is currently underway, as described in &lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-httpapi-deprecation-header/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Deprecation HTTP Header Field draft&lt;/a&gt;, and is still in active development at the time of writing this article.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The &lt;strong&gt;HyperAction API&lt;/strong&gt; convention represents a deliberate reimagining of HTTP API design by enforcing batch processing at every endpoint and a singular naming convention throughout. By eliminating single-item endpoints, abstract pagination models, and generic resource endpoints‚Äîand by always using singular names‚Äîthe API design closely aligns with the underlying business logic and operational realities. With every endpoint accepting and returning arrays of items, employing dedicated HTTP headers for metadata, explicit idempotency keys, and supporting asynchronous operations, the HyperAction API provides a robust, efficient, and clear contract between clients and servers.&lt;/p&gt;&lt;p&gt;Software engineers adopting these guidelines will benefit from clearer API semantics, reduced redundancy in client‚Äìserver communication, and an interface that naturally mirrors the business operations it supports. This document serves as a comprehensive technical reference for designing modern HTTP APIs under the HyperAction API convention.&lt;/p&gt;&lt;h2 id=&quot;future-work-%26-feedback&quot; tabindex=&quot;-1&quot;&gt;Future Work &amp;amp; Feedback&lt;/h2&gt;&lt;p&gt;Please note that this whole concept is still a work in progress. I would be very happy to receive any feedback or suggestions to help refine and improve this approach.&lt;/p&gt;&lt;h2 id=&quot;appendix%3A-embracing-vertical-slice-architecture&quot; tabindex=&quot;-1&quot;&gt;Appendix: Embracing Vertical Slice Architecture&lt;/h2&gt;&lt;p&gt;The protocol conventions presented in this document are partly inspired by the principles of &lt;a href=&quot;https://www.jimmybogard.com/vertical-slice-architecture/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vertical slice architecture&lt;/a&gt;. While this article focuses on redefining HTTP request-response protocols‚Äîsuch as action-oriented endpoints, batch processing, and explicit metadata handling‚Äîthe underlying inspiration comes from an architectural mindset that emphasizes self-contained business features.&lt;/p&gt;&lt;p&gt;Vertical slice architecture is a holistic approach to software organization. It advocates for encapsulating all layers of functionality‚Äîranging from user interface and application logic to data access‚Äîwithin discrete slices that correspond to individual business capabilities. This separation minimizes interdependencies and simplifies testing, maintenance, and independent evolution of features.&lt;/p&gt;&lt;p&gt;It is important to note that this document addresses only the HTTP protocol conventions, not the deeper aspects of code organization. The protocol decisions described here are fully compatible with, and indeed inspired by, a vertical slice approach. However, the specifics of organizing your codebase into vertical slices‚Äîcovering topics such as module boundaries, dependency management, and internal service communication‚Äîfall outside the scope of this article.&lt;/p&gt;&lt;p&gt;We plan to publish a separate article in the future that will explore these code organization topics in detail, providing practical guidance on how to implement vertical slice architecture to complement the protocol conventions outlined here.&lt;/p&gt;</content></entry><entry><title>Announcing QueryLink v1.0.0: Simplify Your UI and Data Integration</title><link href="https://byteaether.github.io/2025/announcing-querylink-v100-simplify-your-ui-and-data-integration/"><updated>2025-03-04T00:00:00Z</updated><id>https://byteaether.github.io/2025/announcing-querylink-v100-simplify-your-ui-and-data-integration/</id><content type="html">&lt;p&gt;We are thrilled to announce the official release of &lt;strong&gt;&lt;a href=&quot;https://github.com/ByteAether/QueryLink/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;QueryLink v1.0.0&lt;/a&gt;&lt;/strong&gt;! This milestone release marks the culmination of our efforts to provide a seamless bridge between UI components and backend data sources powered by &lt;code&gt;IQueryable&lt;/code&gt;. Whether you&#39;re building dynamic data grids or data tables, QueryLink is here to &lt;a href=&quot;https://byteaether.github.io/2025/seamlessly-connecting-frontend-and-backend-data-in-net-applications-a-new-paradigm-for-effortless-integration/&quot;&gt;simplify your life&lt;/a&gt; by handling filters, sorting, and query string conversions with minimal code.&lt;/p&gt;&lt;h2 id=&quot;what-is-querylink%3F&quot; tabindex=&quot;-1&quot;&gt;What is QueryLink?&lt;/h2&gt;&lt;p&gt;QueryLink is a &lt;a href=&quot;https://www.nuget.org/packages/ByteAether.QueryLink/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NuGet package&lt;/a&gt; designed to integrate UI components (like datagrids and datatables) with backend &lt;code&gt;IQueryable&lt;/code&gt; data sources. It helps you to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and apply complex filters and sort orders effortlessly.&lt;/li&gt;&lt;li&gt;Override default behaviors with custom expressions.&lt;/li&gt;&lt;li&gt;Convert filtering and sorting definitions to and from query strings for smooth HTTP API integration.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;By abstracting these common tasks, QueryLink lets you focus on building great applications without getting bogged down in repetitive query logic.&lt;/p&gt;&lt;h2 id=&quot;key-features&quot; tabindex=&quot;-1&quot;&gt;Key Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Filter Definitions:&lt;/strong&gt; Easily define filters using a range of operators (e.g., equals, not equals, greater than, contains, etc.) to refine your queries.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Order Definitions:&lt;/strong&gt; Specify sorting rules to control how your data is displayed.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Expression-Based Overrides:&lt;/strong&gt; Customize default filter and order operations to suit your application&#39;s needs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Query String Conversion:&lt;/strong&gt; Convert definitions to and from query strings, making it straightforward to pass parameters via HTTP requests.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;IQueryable Extensions:&lt;/strong&gt; Directly apply filter and order definitions to your &lt;code&gt;IQueryable&lt;/code&gt; data sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With support for .NET 6.0, .NET 8.0, and .NET Standard 2.1, QueryLink fits neatly into your modern .NET projects.&lt;/p&gt;&lt;h2 id=&quot;installation&quot; tabindex=&quot;-1&quot;&gt;Installation&lt;/h2&gt;&lt;p&gt;Getting started is as simple as running a single command. Install the latest stable version of QueryLink via NuGet:&lt;/p&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package ByteAether.QueryLink&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you need a preview version, you can specify it with the &lt;code&gt;--version&lt;/code&gt; option. This ease-of-installation helps you to integrate QueryLink into your project quickly and reliably.&lt;/p&gt;&lt;h2 id=&quot;how-to-use-querylink&quot; tabindex=&quot;-1&quot;&gt;How to Use QueryLink&lt;/h2&gt;&lt;p&gt;QueryLink provides a few core concepts that make filtering and sorting a breeze:&lt;/p&gt;&lt;h3 id=&quot;1.-defining-filters-and-orders&quot; tabindex=&quot;-1&quot;&gt;1. Defining Filters and Orders&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;Definitions&lt;/code&gt; class allows you to specify filter and order criteria. For example:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; definitions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Definitions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Filters &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FilterDefinition&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FilterOperator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Eq&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FilterOperator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Gt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Orders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OrderDefinition&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token named-parameter punctuation&quot;&gt;IsReversed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token named-parameter punctuation&quot;&gt;IsReversed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This snippet creates filters to select records where the name equals &amp;quot;John&amp;quot; and age is greater than 30, and then orders the results accordingly.&lt;/p&gt;&lt;h3 id=&quot;2.-using-overrides-for-custom-behavior&quot; tabindex=&quot;-1&quot;&gt;2. Using Overrides for Custom Behavior&lt;/h3&gt;&lt;p&gt;Sometimes the default filtering logic isn&#39;t enough. QueryLink&#39;s &lt;code&gt;Overrides&lt;/code&gt; class lets you tailor operations using expression-based overrides:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; overrides &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Overrides&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Filter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FilterOverride&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Order &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OrderOverride&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This approach lets you substitute a property (like &lt;code&gt;Name&lt;/code&gt;) with another (like &lt;code&gt;FullName&lt;/code&gt;) when applying filters or orders, offering flexible customization.&lt;/p&gt;&lt;h3 id=&quot;3.-converting-to-and-from-query-strings&quot; tabindex=&quot;-1&quot;&gt;3. Converting to and from Query Strings&lt;/h3&gt;&lt;p&gt;Easily integrate with web APIs by converting your definitions to a query string and back:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; definitions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToQueryString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Definitions&lt;/span&gt; parsedDefinitions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Definitions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromQueryString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queryString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This feature ensures that your filtering and sorting logic is easily transferable over HTTP.&lt;/p&gt;&lt;h3 id=&quot;4.-applying-definitions-to-iqueryable&quot; tabindex=&quot;-1&quot;&gt;4. Applying Definitions to IQueryable&lt;/h3&gt;&lt;p&gt;Finally, apply your definitions directly to an &lt;code&gt;IQueryable&lt;/code&gt; source:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IQueryable&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;People&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AsQueryable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;definitions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; overrides&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By extending &lt;code&gt;IQueryable&lt;/code&gt;, QueryLink seamlessly integrates with your existing data-access code, providing a clean and efficient query transformation pipeline.&lt;/p&gt;&lt;h2 id=&quot;real-world-examples&quot; tabindex=&quot;-1&quot;&gt;Real-World Examples&lt;/h2&gt;&lt;p&gt;QueryLink shines in practical scenarios‚Äîlike integrating with a MudBlazor DataGrid alongside EF Core. The package simplifies server-side data loading by reading grid state, generating query strings, and applying filter and order definitions to your data source. This comprehensive approach means fewer lines of code and less boilerplate for you to manage.&lt;/p&gt;&lt;h2 id=&quot;join-the-community&quot; tabindex=&quot;-1&quot;&gt;Join the Community&lt;/h2&gt;&lt;p&gt;We believe that community feedback is invaluable. As we celebrate this stable release, we invite you to contribute to the project:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Submit Issues or Feature Requests:&lt;/strong&gt; Help us make QueryLink even better.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Contribute Code:&lt;/strong&gt; Fork the repository, implement improvements, and send us a pull request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Spread the Word:&lt;/strong&gt; Share your experiences using QueryLink on social media and developer forums.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Your contributions and insights will help shape the future of QueryLink.&lt;/p&gt;&lt;h2 id=&quot;license&quot; tabindex=&quot;-1&quot;&gt;License&lt;/h2&gt;&lt;p&gt;QueryLink is released under the MIT License, ensuring that it remains free and open for your use and customization. For more details, please refer to the LICENSE file in the repository.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ByteAether/QueryLink/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;QueryLink v1.0.0&lt;/a&gt; is here to make your UI and data integration simpler, more flexible, and efficient. We look forward to seeing the innovative solutions you build with it. Happy coding!&lt;/p&gt;</content></entry><entry><title>Harnessing Weak-Referenced Event Managers and Publish‚ÄìSubscribe Patterns in .NET</title><link href="https://byteaether.github.io/2025/harnessing-weak-referenced-event-managers-and-publish-subscribe-patterns-in-net/"><updated>2025-02-25T00:00:00Z</updated><id>https://byteaether.github.io/2025/harnessing-weak-referenced-event-managers-and-publish-subscribe-patterns-in-net/</id><content type="html">&lt;p&gt;In modern application development, event-driven programming is ubiquitous. Whether you&#39;re building rich desktop applications with WPF or web applications with Blazor, events provide a powerful way to decouple components. However, one common pitfall in event-based systems is memory leaks caused by lingering event subscriptions. The weak event pattern, along with publish‚Äìsubscribe architectures, offers a robust solution by using weak references to hold subscribers. This ensures that objects can be garbage collected when no longer needed, even if they remain subscribed to events.&lt;/p&gt;&lt;p&gt;In this article, we will explore the theory behind weak-referenced event managers, demonstrate their practical implementation in .NET using C#, and illustrate how these concepts can be applied to real-world scenarios‚Äîincluding a look at the &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ByteAether.WeakEvent library&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;understanding-the-weak-event-pattern&quot; tabindex=&quot;-1&quot;&gt;Understanding the Weak Event Pattern&lt;/h2&gt;&lt;h3 id=&quot;what-is-a-weak-event%3F&quot; tabindex=&quot;-1&quot;&gt;What Is a Weak Event?&lt;/h3&gt;&lt;p&gt;In the typical event subscription model in .NET, the publisher holds a strong reference to each subscriber via its delegate invocation list. If a subscriber does not explicitly unsubscribe, it will remain in memory‚Äîeven when it&#39;s no longer needed‚Äîcausing memory leaks. The weak event pattern addresses this issue by holding references to subscribers weakly. In simple terms, a weak reference allows the garbage collector to reclaim the subscriber&#39;s memory if no other strong references exist.&lt;/p&gt;&lt;p&gt;According to Microsoft&#39;s documentation on &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/desktop/wpf/events/weak-event-patterns?view=netdesktop-9.0&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WPF weak event patterns&lt;/a&gt;, the weak event pattern is particularly valuable in scenarios where the publisher&#39;s lifetime is longer than that of its subscribers. This pattern minimizes the risk of memory leaks by decoupling the event&#39;s lifecycle from its subscribers.&lt;/p&gt;&lt;h3 id=&quot;key-benefits&quot; tabindex=&quot;-1&quot;&gt;Key Benefits&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Memory Efficiency:&lt;/strong&gt; By using weak references, subscribers do not prevent garbage collection, thereby reducing memory bloat.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Decoupled Design:&lt;/strong&gt; Publishers and subscribers can exist independently. This decoupling facilitates more maintainable code.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Automatic Cleanup:&lt;/strong&gt; There is less need for manual unsubscription, which reduces the risk of human error leading to memory leaks.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Versatility:&lt;/strong&gt; While particularly useful in UI frameworks (WPF, Blazor), the pattern is applicable in any event-driven architecture.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;deep-dive-into-.net-garbage-collection-and-weak-references&quot; tabindex=&quot;-1&quot;&gt;Deep Dive into .NET Garbage Collection and Weak References&lt;/h2&gt;&lt;h3 id=&quot;the-role-of-the-garbage-collector&quot; tabindex=&quot;-1&quot;&gt;The Role of the Garbage Collector&lt;/h3&gt;&lt;p&gt;The .NET garbage collector (GC) is responsible for managing memory automatically. It frees objects that are no longer referenced by the application. However, in traditional event subscriptions, the publisher&#39;s reference to the subscriber via the event delegate prevents the GC from collecting the subscriber‚Äîeven if the subscriber is no longer actively used.&lt;/p&gt;&lt;h3 id=&quot;how-weak-references-work&quot; tabindex=&quot;-1&quot;&gt;How Weak References Work&lt;/h3&gt;&lt;p&gt;A weak reference allows an object to be referenced without preventing its collection by the GC. Microsoft explains in its &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/weak-references&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;.NET garbage collection documentation on weak references&lt;/a&gt; that a weak reference object does not count as a &amp;quot;root&amp;quot; for garbage collection. This means that if the only references to an object are weak, the GC can reclaim that object&#39;s memory.&lt;/p&gt;&lt;h4 id=&quot;example%3A-using-weakreference-in-c%23&quot; tabindex=&quot;-1&quot;&gt;Example: Using WeakReference in C#&lt;/h4&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MySubscriber&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;HandleEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventArgs&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Event handled by MySubscriber.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// List of weak references to event handlers&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;EventHandler&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _handlers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;EventHandler&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EventHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _handlers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;EventHandler&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RaiseEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; weakHandler &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _handlers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;weakHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EventArgs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Empty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this simple example, the &lt;code&gt;Publisher&lt;/code&gt; class holds a list of weak references to event handlers. When raising the event, it attempts to invoke only those handlers that are still alive. This strategy prevents dead objects from keeping themselves in memory alive indefinitely.&lt;/p&gt;&lt;h2 id=&quot;the-publish%E2%80%93subscribe-pattern-and-its-synergy-with-weak-references&quot; tabindex=&quot;-1&quot;&gt;The Publish‚ÄìSubscribe Pattern and Its Synergy with Weak References&lt;/h2&gt;&lt;p&gt;The publish‚Äìsubscribe (pub‚Äìsub) pattern is an asynchronous messaging paradigm where publishers emit events and subscribers listen for those events. This decoupling means that the publisher does not need to know the specifics of its subscribers. Traditionally, this pattern improves scalability and maintainability, particularly in distributed systems and event-driven architectures.&lt;/p&gt;&lt;h3 id=&quot;combining-weak-references-with-pub%E2%80%93sub&quot; tabindex=&quot;-1&quot;&gt;Combining Weak References with Pub‚ÄìSub&lt;/h3&gt;&lt;p&gt;By integrating weak references into a publish‚Äìsubscribe system, developers can manage event subscriptions more safely. The use of weak references ensures that even if a subscriber forgets to unsubscribe, the system remains robust against memory leaks. This is especially critical in long-running applications or dynamic environments like modern web frameworks.&lt;/p&gt;&lt;h4 id=&quot;example%3A-a-weak-referenced-publish%E2%80%93subscribe-system-in-c%23&quot; tabindex=&quot;-1&quot;&gt;Example: A Weak-Referenced Publish‚ÄìSubscribe System in C#&lt;/h4&gt;&lt;p&gt;Consider a more structured implementation where a mediator handles event subscriptions:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TEventArgs&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WeakEventManager&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TEventArgs&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;EventArgs&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _subscribers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _subscribers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WeakReference&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Unsubscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _subscribers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RemoveAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wr &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Clean up dead references&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;RaiseEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TEventArgs&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _subscribers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RemoveAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wr &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;wr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Cleanup&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; weakSubscriber &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _subscribers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;weakSubscriber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IEventSubscriber&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TEventArgs&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; subscriber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; subscriber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OnEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this code, the &lt;code&gt;WeakEventManager&amp;lt;TEventArgs&amp;gt;&lt;/code&gt; class encapsulates the publish‚Äìsubscribe pattern. It leverages weak references to avoid preventing the garbage collection of its subscribers. The cleanup logic ensures that any references to objects that have been collected are removed.&lt;/p&gt;&lt;h2 id=&quot;real-world-applications%3A-byteaether.weakevent-nuget-library&quot; tabindex=&quot;-1&quot;&gt;Real-World Applications: ByteAether.WeakEvent NuGet Library&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ByteAether.WeakEvent&lt;/a&gt; &lt;a href=&quot;https://www.nuget.org/packages/ByteAether.WeakEvent/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NuGet library&lt;/a&gt; provides a ready-to-use implementation of the generic weak event pattern using the publish‚Äìsubscribe mechanism. It is built on the principles discussed above and is tailored for .NET developers seeking an out-of-the-box solution for managing event lifecycles.&lt;/p&gt;&lt;p&gt;According to its description:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The weak event pattern is a proven approach to managing event subscriptions in .NET, as detailed in Microsoft&#39;s documentation on &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/desktop/wpf/events/weak-event-patterns?view=netdesktop-9.0&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WPF weak event patterns&lt;/a&gt;. This design avoids memory leaks by holding event subscribers with weak references, which means that even if an object remains subscribed to an event, it can still be garbage collected when no longer in use.&lt;/p&gt;&lt;p&gt;Leveraging the power of .NET&#39;s weak reference mechanism, as explained in the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/weak-references&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;.NET garbage collection documentation&lt;/a&gt;, the WeakEvent library ensures that event subscribers do not prevent the garbage collector from reclaiming memory. This decoupling of publishers and subscribers provides a robust solution for managing event lifecycles without the need for manual unsubscription.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;benefits-in-blazor-and-other-modern-frameworks&quot; tabindex=&quot;-1&quot;&gt;Benefits in Blazor and Other Modern Frameworks&lt;/h3&gt;&lt;p&gt;When developing Blazor components, for example, unsubscribing from events during component disposal can be tricky. The &lt;strong&gt;ByteAether.WeakEvent&lt;/strong&gt; library addresses this by ensuring that subscriptions are weak; once a component is no longer rendered, the weak reference does not prevent its memory from being reclaimed. This automatic cleanup is invaluable in preventing the accumulation of &amp;quot;dead&amp;quot; components that can degrade performance over time.&lt;/p&gt;&lt;h4 id=&quot;example-usage-in-a-blazor-component&quot; tabindex=&quot;-1&quot;&gt;Example Usage in a Blazor Component&lt;/h4&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;@code &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Inject&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Publisher&lt;/span&gt; _publisher &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnInitialized&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Assume Publisher has a public property WeakEvent&amp;lt;MyEventData&gt; OnPublish&lt;/span&gt; _publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OnPublish&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyEventData&lt;/span&gt; eventData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Handle the event (e.g., update UI state)&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Event received in Blazor component.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// No need to manually unsubscribe, the weak reference handles cleanup.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this Blazor example, the component subscribes to event in a &lt;code&gt;Publisher&lt;/code&gt; instance, that makes use of ByteAether.WeakEvent library. Even if the component is disposed, the weak reference does not hinder the garbage collection process, eliminating one of the common pitfalls in event-driven UI development.&lt;/p&gt;&lt;h2 id=&quot;broader-implications-and-cross-platform-benefits&quot; tabindex=&quot;-1&quot;&gt;Broader Implications and Cross-Platform Benefits&lt;/h2&gt;&lt;p&gt;Although our examples and discussion have been centered on C# and .NET, the challenges of managing event lifecycles and preventing memory leaks are common across all programming environments. Languages and frameworks that use event-driven paradigms‚Äîsuch as JavaScript, Java, and even C++‚Äîface similar issues when subscribers outlive their useful life due to lingering references.&lt;/p&gt;&lt;h3 id=&quot;applying-weak-referenced-event-patterns-in-other-environments&quot; tabindex=&quot;-1&quot;&gt;Applying Weak-Referenced Event Patterns in Other Environments&lt;/h3&gt;&lt;p&gt;Many modern frameworks provide mechanisms similar to .NET&#39;s weak references. For instance:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;JavaScript:&lt;/strong&gt; Libraries like RxJS help manage subscriptions in a reactive programming model. Although JavaScript does not have a built-in weak reference mechanism in all runtimes, the concept of unsubscribing (or using operators like &lt;code&gt;takeUntil&lt;/code&gt;) plays a similar role in managing memory.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Java:&lt;/strong&gt; The use of &lt;code&gt;WeakReference&lt;/code&gt; in Java follows similar principles, allowing developers to build event systems where the publisher does not inadvertently extend the lifetime of the subscriber.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;C++:&lt;/strong&gt; With careful design, smart pointers and observer patterns can mimic weak event management to avoid memory leaks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thus, while the syntax and APIs differ, the fundamental benefit remains the same: decoupling the event subscription mechanism from the object lifecycle leads to more robust, maintainable, and memory-efficient applications.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The weak event pattern combined with the publish‚Äìsubscribe model represents a powerful approach to managing events in software engineering. By utilizing weak references, developers can mitigate common pitfalls such as memory leaks and dangling subscriptions, ensuring that components are cleaned up promptly by the garbage collector. In the .NET world, where managed memory and automatic garbage collection are key features, these patterns are especially valuable.&lt;/p&gt;&lt;p&gt;Libraries like &lt;a href=&quot;https://github.com/ByteAether/WeakEvent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ByteAether.WeakEvent&lt;/a&gt; encapsulate these best practices, providing developers with a plug-and-play solution to implement weak event patterns easily. Whether you&#39;re developing desktop applications with WPF, building modern web applications with Blazor, or designing systems in other environments, understanding and leveraging weak-referenced event managers can significantly enhance application reliability and performance.&lt;/p&gt;&lt;p&gt;As the landscape of software development evolves‚Äîwith more dynamic and component-based systems emerging‚Äîthe need for robust event management becomes increasingly critical. Embracing patterns that promote decoupling and automatic resource management not only leads to cleaner code but also results in applications that are more scalable and resilient in the face of growing complexity.&lt;/p&gt;&lt;p&gt;By integrating these approaches into your development practices, you are better equipped to build systems that manage resources intelligently, ultimately leading to a smoother user experience and more maintainable codebases.&lt;/p&gt;</content></entry><entry><title>Seamlessly Connecting Frontend and Backend Data in .NET Applications: A New Paradigm for Effortless Integration</title><link href="https://byteaether.github.io/2025/seamlessly-connecting-frontend-and-backend-data-in-net-applications-a-new-paradigm-for-effortless-integration/"><updated>2025-02-18T00:00:00Z</updated><id>https://byteaether.github.io/2025/seamlessly-connecting-frontend-and-backend-data-in-net-applications-a-new-paradigm-for-effortless-integration/</id><content type="html">&lt;p&gt;In today&#39;s fast‚Äêpaced software development world, engineers are often forced to write repetitive integration logic to connect user interfaces - especially data grids and tables - to their backend data sources. Every project, every new feature, and every iteration seems to reintroduce the same challenges: how do we reliably filter, sort, and display data without reinventing the wheel each time? The answer lies in automating these common tasks, thereby freeing developers to focus on business logic rather than boilerplate code.&lt;/p&gt;&lt;h2 id=&quot;the-problem%3A-repetitive-integration-logic&quot; tabindex=&quot;-1&quot;&gt;The Problem: Repetitive Integration Logic&lt;/h2&gt;&lt;p&gt;Consider a typical .NET application where you need to fetch, filter, and sort data from a SQL database using Entity Framework Core. In many projects, developers are repeatedly writing similar code snippets to achieve this functionality. For example:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Example: Manually applying filters and sorting on a data source&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IQueryable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetFilteredAndSortedPeople&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplicationDbContext&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; minAge&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; sortField &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IQueryable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;People&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AsQueryable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Repetitive filtering logic:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minAge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HasValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Age &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; minAge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Repetitive sorting logic:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sortField &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OrderBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sortField &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OrderByDescending&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, imagine this pattern repeated across multiple controllers, services, and even projects. Each time you need to tweak a filter or adjust a sort order, you are forced to manually update these code blocks - often duplicating logic and introducing room for inconsistencies or bugs.&lt;/p&gt;&lt;p&gt;Another example might involve converting query parameters from the UI into LINQ expressions:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Example: Converting UI query parameters into LINQ filter expressions&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IQueryable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FilterProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IQueryable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Product&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dictionary&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; filters &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; filter &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Key&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Category &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; filter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; price&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Price &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; price&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;problems-with-this-approach%3A&quot; tabindex=&quot;-1&quot;&gt;Problems with this approach:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Wastes valuable time&lt;/strong&gt;: Developers must repeatedly implement similar logic across different parts of an application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Increases error potential&lt;/strong&gt;: Manual adjustments lead to inconsistencies and bugs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Reduces maintainability&lt;/strong&gt;: Updates must be applied in multiple places, making maintenance a challenge.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Clearly, there is a need for a generic, reusable solution that abstracts away this repetitive integration logic.&lt;/p&gt;&lt;h2 id=&quot;identifying-the-requirements-for-a-generic-solution&quot; tabindex=&quot;-1&quot;&gt;Identifying the Requirements for a Generic Solution&lt;/h2&gt;&lt;p&gt;To create a generic solution for handling data integration, certain core requirements must be met:&lt;/p&gt;&lt;h3 id=&quot;1.-serializability&quot; tabindex=&quot;-1&quot;&gt;1. Serializability&lt;/h3&gt;&lt;p&gt;For a solution to work seamlessly between the client and server, its filter and order definitions must be serializable. This allows easy transmission over HTTP without losing state.&lt;/p&gt;&lt;h3 id=&quot;2.-integration-with-iqueryable-and-ef-core&quot; tabindex=&quot;-1&quot;&gt;2. Integration with IQueryable and EF Core&lt;/h3&gt;&lt;p&gt;The solution must work directly with &lt;code&gt;IQueryable&lt;/code&gt;, ensuring that filtering and sorting logic is applied at the database level, improving performance.&lt;/p&gt;&lt;h3 id=&quot;3.-flexible-filter-definitions&quot; tabindex=&quot;-1&quot;&gt;3. Flexible Filter Definitions&lt;/h3&gt;&lt;p&gt;A robust solution should support a variety of filtering operators such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Equals (&lt;code&gt;=&lt;/code&gt;) / Not Equals (&lt;code&gt;!=&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Greater Than (&lt;code&gt;&amp;gt;&lt;/code&gt;) / Less Than (&lt;code&gt;&amp;lt;&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Contains (&lt;code&gt;=*&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;... and more.&lt;/p&gt;&lt;h3 id=&quot;4.-support-for-overrides&quot; tabindex=&quot;-1&quot;&gt;4. Support for Overrides&lt;/h3&gt;&lt;p&gt;Developers should be able to specify overrides for sorting and filtering logic to handle cases where default behavior isn&#39;t sufficient. For example, sorting should support custom overrides, like sorting &lt;code&gt;Firstname&lt;/code&gt; as &lt;code&gt;[Firstname] [Lastname]&lt;/code&gt; to ensure consistent ordering.&lt;/p&gt;&lt;h2 id=&quot;a-modern-approach-to-automating-data-query-integration&quot; tabindex=&quot;-1&quot;&gt;A Modern Approach to Automating Data Query Integration&lt;/h2&gt;&lt;p&gt;An innovative solution was born: &lt;strong&gt;&lt;a href=&quot;https://github.com/ByteAether/QueryLink/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;QueryLink&lt;/a&gt;&lt;/strong&gt;. This library encapsulates all the above requirements into a single, easy-to-use package.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Filter and Order Definitions&lt;/strong&gt;: Define filters and sorting orders without writing complex LINQ expressions.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Expression-based Overrides&lt;/strong&gt;: Customize filtering or sorting logic using lambda expressions with type safety.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Query String Conversion&lt;/strong&gt;: Convert definitions to query strings for seamless transmission over &lt;code&gt;GET&lt;/code&gt; parameters.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Direct IQueryable Integration&lt;/strong&gt;: Ensures efficient query execution at the database level.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;getting-started%3A-hands-on-code-examples&quot; tabindex=&quot;-1&quot;&gt;Getting Started: Hands-On Code Examples&lt;/h2&gt;&lt;h3 id=&quot;defining-filters-and-sorting-orders&quot; tabindex=&quot;-1&quot;&gt;Defining Filters and Sorting Orders&lt;/h3&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; definitions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Definitions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Filters &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FilterOperator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Eq&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FilterOperator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Gt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Orders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token named-parameter punctuation&quot;&gt;IsReversed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;customizing-with-overrides-(optional)&quot; tabindex=&quot;-1&quot;&gt;Customizing with Overrides (Optional)&lt;/h3&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; overrides &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Overrides&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Filter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Order &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;applying-definitions-to-an-iqueryable-source&quot; tabindex=&quot;-1&quot;&gt;Applying Definitions to an IQueryable Source&lt;/h3&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IQueryable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;People&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AsQueryable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;definitions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; overrides&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;embracing-the-new-way-of-integration-logic&quot; tabindex=&quot;-1&quot;&gt;Embracing the New Way of Integration Logic&lt;/h2&gt;&lt;p&gt;With QueryLink:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Eliminate Repetitiveness&lt;/strong&gt;: No more writing the same boilerplate code repeatedly.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Improve Code Clarity&lt;/strong&gt;: Declarative definitions make code easier to read and maintain.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Enhance Consistency&lt;/strong&gt;: Apply the same filtering and sorting logic across the application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Speed Up Development&lt;/strong&gt;: Focus on business logic instead of integration logic.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;why-querylink-is-a-must-have-in-every-.net-project&quot; tabindex=&quot;-1&quot;&gt;Why QueryLink Is a Must-Have in Every .NET Project&lt;/h2&gt;&lt;p&gt;QueryLink transforms UI-to-database integration by:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Streamlining Development&lt;/strong&gt;: Reducing the need for repetitive query logic.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Ensuring Consistency&lt;/strong&gt;: Standardizing filtering and sorting mechanisms.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Enhancing Maintainability&lt;/strong&gt;: Centralizing data integration logic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Given these advantages, &lt;strong&gt;QueryLink is an essential library for every full-stack .NET application&lt;/strong&gt;. By integrating this tool into your workflow, you empower your team to build more efficient and maintainable software.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Embrace the future of data integration with QueryLink.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ByteAether/QueryLink/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Check out the QueryLink repository on GitHub&lt;/a&gt;.&lt;/p&gt;</content></entry></feed>